{
  "openapi": "3.0.3",
  "info": {
    "title": "Resource Guru API",
    "description": "# Overview\n\nThis is a REST-style API that uses serialized JSON and OAuth2 authentication. We are very interested in making our API, and this documentation, as good as it possibly can be so please send any feedback to happytohelp@resourceguruapp.com. Any thoughts or suggestions will be gratefully received.\n\n## Making Requests\n\n### Encoding\n\nThe API expects all data to be UTF-8 encoded.\n\n### The Base URL\n\nAll requests start with the `https://api.resourceguruapp.com/` base URL.\n\n- All requests are done via SSL.\n- All responses are in JSON.\n\n### Making a Basic Request\n\nWith the exception of [Accounts](#tag/account) all requests must be prefixed with the `Account URL ID`.\n\nTo make a request for all the [Resources](#tag/resource) on the Example Corp account, the request URL will look\nsomething like this `https://api.resourceguruapp.com/v1/example-corp/resources`.\n\n## Rate Limiting\n\nYou can perform up to 33 requests per 10 second period on a registered application. If you exceed this limit, you'll get a 429 Rate Limit Exceeded response for subsequent requests. Check the Retry-After header to see how many seconds to wait before retrying the request.\n\nUp to 20 OAuth2 tokens can be issued for a user per minute, and up to 1,000 OAuth2 tokens per day.\n\n## CORS\n\nResource Guru provides headers to allow CORS requests to the API. You will need to authenticate using a valid OAuth2 token.\n\n## Response Codes\n\n- `200` OK\n- `201` Created\n- `204` No Content\n- `400` Bad Request\n- `401` Unauthorized\n- `403` Forbidden\n- `404` Not Found\n- `422` Unprocessable Entity\n- `5xx` Resource Guru is having trouble\n\n# Authentication\n\n## OAuth2 authentication\n\nIn order to make authenticated calls to Resource Guru's API, your application must first obtain an OAuth2 access token.\nTo register your app go to https://app.resourceguruapp.com/developers.\n\nResource Guru implements OAuth2 with the authentication code flow.\n\nOnce you have authenticated, you can get information about the authenticated user by calling `GET https://api.resourceguruapp.com/v1/me`. More details about the request and response are available [below](#tag/user/paths/~1v1~1me/get).\n\nGetting access to a user's Resource Guru account requires going through a step of\nauthentication. We offer OAuth2 as the standard way to authenticate with our API\nas this offers a simple flow for users to allow app access without you having to store\ntheir credentials.\n\n## HTTP Basic authentication\n\nFor convenience, Resource Guru's API will accept credentials provided through the HTTP Basic Authorization header. This is intended for exploration of the API only. We apply a global rate limit to HTTP Basic authorizations based on compute resources available at the given time, and provide no SLA. HTTP Basic authentication may be disabled without warning.\n\n## Considerations when Single Sign On is required\n\nIf your account is configured to require SSO for logins, API access through OAuth2\nis only available when authenticating as the account owner. This restriction ensures\nthat users who have been removed from your identity provider (IdP) aren't able to\ncontinue accessing your Resource Guru account with unexpired API tokens.\n\n## Getting started\n\nWe recommend using an OAuth2 library for the platform you're working with, rather than\nworking from scratch. A fairly comprehensive list of libraries can be found [here](http://oauth.net/2/).\n\n1. Register an app at [developers.resourceguruapp.com](https://developers.resourceguruapp.com).\n   Your app will be assigned a `client_id` and `client_secret` that will be used to identify your app\n   when users authenticate with the API. You'll need to provide a `redirect_uri` where we'll send the\n   verification code for authentication. Just use a fake URL like `http://localhost/oauth` if you haven't\n   got one yet. Any Redirect URI given must be secure (HTTPS) unless it redirects to localhost.\n\n2. Configure your OAuth2 library to use the `client_id`, `client_secret` and `redirect_uri` for your app.\n   You'll need to configure these URLs as well:\n\n   - `https://api.resourceguruapp.com/oauth/authorize` to request authorization (must be requested with an HTTP GET request).\n   - `https://api.resourceguruapp.com/oauth/token` to retrieve tokens (must be requested with an HTTP POST request).\n\n3. Authenticate with the API. We'll provide code samples using the [intridea/oauth2](https://github.com/intridea/oauth2) library in Ruby.\n\n   ### Quick start using user's login credentials\n\n   This method is only recommended for private apps, such as data imports and exports or internal business reporting.\n   It's useful to get started quickly without all of the overhead of OAuth2 though, which makes it great for exploration.\n   This should not be used for integrating 3rd party apps with Resource Guru as it requires knowing the user's private credentials.\n\n   We support the OAuth2 `password` grant type. To authenticate, make an HTTP `POST` to `/oauth/token` with the following:\n\n   ```js\n   {\n     \"grant_type\"    : \"password\",\n     \"username\"      : \"user@example.com\",\n     \"password\"      : \"secret\",\n     \"client_id\"     : \"the_client_id\",\n     \"client_secret\" : \"the_client_secret\"\n   }\n   ```\n\n   You'll receive the access token back in the response:\n\n   ```js\n   {\n     \"access_token\": \"the_oauth_access_token\",\n     \"refresh_token\": \"the_oauth_refresh_token\",\n     \"token_type\": \"bearer\",\n     \"expires_in\": 604800\n   }\n   ```\n\n   To use this with the OAuth2 Ruby library is easy:\n\n   ```ruby\n   client = OAuth2::Client.new(client_id, client_secret, site: \"https://api.resourceguruapp.com\")\n   token = client.password.get_token(\"user@example.com\", \"secret\")\n   token.get(\"/v1/example-corp/resources\")\n   ```\n\n   ### Recommended authentication method using an authorization code\n\n   The password grant method shown above is great for getting started quickly, but is impractical for apps that require\n   users to authenticate with Resource Guru as you would have to store the user's Resource Guru login credentials.\n\n   We support the standard auth code flow as well. Here is a code sample in Ruby of how to authenticate this way.\n\n   ```ruby\n   require 'oauth2'\n\n   client_id = ENV[\"CLIENT_ID\"]\n   client_secret = ENV[\"CLIENT_SECRET\"]\n   redirect_uri = ENV[\"REDIRECT_URI\"]\n\n   client = OAuth2::Client.new(client_id, client_secret, site: 'https://api.resourceguruapp.com')\n\n   puts client.auth_code.authorize_url(redirect_uri: redirect_uri)\n   ```\n\n   Go to the URL provided to authorize with the API. This is the URL you'll direct users to to allow\n   your app to access the API. When you've authorized with the API, the browser will be redirected to the\n   `redirect_uri` you provided and the authorization code will be sent as a parameter in the URL. For example\n   if your `redirect_uri` was `https://localhost/oauth/callback`, the user will be redirected to\n   `https://localhost/oauth/callback?code=<the code>`\n\n   Use this code to retrieve an access token and refresh token:\n\n   ```ruby\n   code = \"code sent to the redirect_uri in the previous step\"\n   access_token = client.auth_code.get_token(code, redirect_uri: redirect_uri)\n   access_token.get(\"/v1/example-corp/resources\")\n   ```\n\n   Save the values returned as `access_token.token`, `access_token.refresh_token` and `access_token.expires_at` for later usage.\n\n   To connect to the API with a known token:\n\n   ```ruby\n   client_id = ENV[\"CLIENT_ID\"]\n   client_secret = ENV[\"CLIENT_SECRET\"]\n   redirect_uri = ENV[\"REDIRECT_URI\"]\n   oauth_token = ENV[\"OAUTH_TOKEN\"]\n   refresh_token = ENV[\"REFRESH_TOKEN\"]\n   expires_at = ENV[\"EXPIRY\"]\n\n   client = OAuth2::Client.new(client_id, client_secret, site: 'https://api.resourceguruapp.com')\n   access_token = OAuth2::AccessToken.new(client, oauth_token, refresh_token: refresh_token, expires_at: expires_at)\n   access_token.get(\"/v1/example-corp/resources\")\n   ```\n\n   In the above example using the token expiry time stamp is optional, but the OAuth2 library will automatically handle\n   refreshing tokens if it is provided.\n\n4. Tokens expire after 7 days and need to be refreshed. When authenticating, a refresh token and expiration\n   timestamp is provided. Use the refresh token to retrieve a new access token. Most OAuth2 client libraries will handle this automatically.\n\n   ```ruby\n   client_id = ENV[\"CLIENT_ID\"]\n   client_secret = ENV[\"CLIENT_SECRET\"]\n   redirect_uri = ENV[\"REDIRECT_URI\"]\n   oauth_token = ENV[\"OAUTH_TOKEN\"]\n   refresh_token = ENV[\"REFRESH_TOKEN\"]\n   expires_at = ENV[\"EXPIRY\"]\n\n   client = OAuth2::Client.new(client_id, client_secret, site: 'https://api.resourceguruapp.com')\n   access_token = OAuth2::AccessToken.new(client, oauth_token, refresh_token: refresh_token, expires_at: expires_at)\n   new_access_token = access_token.refresh\n   new_access_token.get(\"/v1/example-corp/bookings\")\n   ```\n\n   The old access token will be expired immediately and the new access token will have to be used from that point on. Make sure you\n   save the new access token, refresh token and expiration timestamps when doing this.\n\n## Examples\n\n### Python 3\n\n```python\nfrom urllib.parse import urlencode\nimport json\nimport requests\n\nclient_id     = 'APPLICATION_CLIENT_ID'\nclient_secret = 'APPLICATION_SECRET'\nredirect_uri  = 'REDIRECT_URI'\nauthorize_url = \"https://api.resourceguruapp.com/oauth/authorize?client_id=%(client_id)s&redirect_uri=%(redirect_uri)s&response_type=code\" % locals()\n\n# Visit the Auth URL -> authorize_url defined above\n# Get code token after authorizing\nreturned_code = input(\"Enter the code from the authorization step: \")\n\nparameters = {\n  'client_id': client_id,\n  'client_secret': client_secret,\n  'code': returned_code,\n  'grant_type': \"authorization_code\",\n  'redirect_uri': redirect_uri\n}\n\ntoken_url = 'https://api.resourceguruapp.com/oauth/token'\ntoken     = requests.post(token_url, urlencode(parameters)).json()\nheaders   = { \"Authorization\": \"Bearer \" + token['access_token'] }\n\nresources = requests.get(\"https://api.resourceguruapp.com/v1/example-account-id/resources\", headers=headers).json()\n\n# Now let's play in an interactive console\nimport code;code.interact(local=dict(globals(),**locals()))\n```\n\n### Bash\n\n```bash\n#!/bin/bash\n\nclient_id='APPLICATION_CLIENT_ID'\nclient_secret='APPLICATION_SECRET'\nredirect_uri='REDIRECT_URI'\nauthorize_url=\"https://api.resourceguruapp.com/oauth/authorize?client_id=$client_id&redirect_uri=$redirect_uri&response_type=code\"\ntoken_url='https://api.resourceguruapp.com/oauth/token'\n\necho \"Please follow the given link: $authorize_url\"\necho \"Please provide the given code, followed by [ENTER]:\"\n\nread code\n\ntoken_data=`curl --data \"grant_type=authorization_code\" --data-urlencode \"client_id=$client_id\" --data-urlencode \"client_secret=$client_secret\" --data-urlencode \"code=$code\" --data-urlencode \"redirect_uri=$redirect_uri\" $token_url`\ntoken=`echo $token_data | jsawk 'return this.access_token'`\n\nresources_url=\"https://api.resourceguruapp.com/v1/example-account-id/resources\"\n\necho `curl -H \"Authorization: Bearer $token\" $resources_url`\n```\n\n### Ruby\n\n```ruby\nrequire \"oauth2\"\n\nclient_id = \"APPLICATION_CLIENT_ID\"\nclient_secret = \"APPLICATION_SECRET\"\nredirect_uri = \"REDIRECT_URI\"\n\nclient = OAuth2::Client.new(client_id, client_secret, { site: { url: 'https://api.resourceguruapp.com'}})\nauthorize_url = client.auth_code.authorize_url(redirect_uri: redirect_uri)\n\n# Visit the Auth URL -> authorize_url defined above to get the code\nputs \"Enter the code from the authorization step\"\ncode = gets.strip\n\naccess_token = client.auth_code.get_token(code, redirect_uri: redirect_uri)\n\naccess_token.get(\"/v1/example-account-id/resources\")\n\n# Now let's play in an interactive console\nrequire \"IRB\"\nIRB.start\n```\n\n# Data types\n\n## ISO8601 date format\n\nThe ISO8601 format is used for dates and times throughout the Resource Guru API.\n\nAn ISO8601 date string is formatted as `YYYY-MM-DD`. For example: `2020-01-31`.\n\nAn ISO8601 date time string is formatted as `YYYY-MM-DDTHH:mm:ssZ`. For example: `2020-01-31T12:34:56Z`\n\n## Day of week\n\nDays of the week are represented as integers from `0-6`.\n\n| API | Day       |\n| --- | --------- |\n| 0   | Sunday    |\n| 1   | Monday    |\n| 2   | Tuesday   |\n| 3   | Wednesday |\n| 4   | Thursday  |\n| 5   | Friday    |\n| 6   | Saturday  |\n\n## Timezones\n\nTimezone references in the Resource Guru API use the names of Rails ActiveSupport timezones.\n\n| Offset      | Name                         |\n| ----------- | ---------------------------- |\n| (GMT-11:00) | American Samoa               |\n| (GMT-11:00) | International Date Line West |\n| (GMT-11:00) | Midway Island                |\n| (GMT-10:00) | Hawaii                       |\n| (GMT-09:00) | Alaska                       |\n| (GMT-08:00) | Pacific Time (US & Canada)   |\n| (GMT-08:00) | Tijuana                      |\n| (GMT-07:00) | Arizona                      |\n| (GMT-07:00) | Chihuahua                    |\n| (GMT-07:00) | Mazatlan                     |\n| (GMT-07:00) | Mountain Time (US & Canada)  |\n| (GMT-06:00) | Central America              |\n| (GMT-06:00) | Central Time (US & Canada)   |\n| (GMT-06:00) | Guadalajara                  |\n| (GMT-06:00) | Mexico City                  |\n| (GMT-06:00) | Monterrey                    |\n| (GMT-06:00) | Saskatchewan                 |\n| (GMT-05:00) | Bogota                       |\n| (GMT-05:00) | Eastern Time (US & Canada)   |\n| (GMT-05:00) | Indiana (East)               |\n| (GMT-05:00) | Lima                         |\n| (GMT-05:00) | Quito                        |\n| (GMT-04:30) | Caracas                      |\n| (GMT-04:00) | Atlantic Time (Canada)       |\n| (GMT-04:00) | Georgetown                   |\n| (GMT-04:00) | La Paz                       |\n| (GMT-04:00) | Santiago                     |\n| (GMT-03:30) | Newfoundland                 |\n| (GMT-03:00) | Brasilia                     |\n| (GMT-03:00) | Buenos Aires                 |\n| (GMT-03:00) | Greenland                    |\n| (GMT-02:00) | Mid-Atlantic                 |\n| (GMT-01:00) | Azores                       |\n| (GMT-01:00) | Cape Verde Is.               |\n| (GMT+00:00) | Casablanca                   |\n| (GMT+00:00) | Dublin                       |\n| (GMT+00:00) | Edinburgh                    |\n| (GMT+00:00) | Lisbon                       |\n| (GMT+00:00) | London                       |\n| (GMT+00:00) | Monrovia                     |\n| (GMT+00:00) | UTC                          |\n| (GMT+01:00) | Amsterdam                    |\n| (GMT+01:00) | Belgrade                     |\n| (GMT+01:00) | Berlin                       |\n| (GMT+01:00) | Bern                         |\n| (GMT+01:00) | Bratislava                   |\n| (GMT+01:00) | Brussels                     |\n| (GMT+01:00) | Budapest                     |\n| (GMT+01:00) | Copenhagen                   |\n| (GMT+01:00) | Ljubljana                    |\n| (GMT+01:00) | Madrid                       |\n| (GMT+01:00) | Paris                        |\n| (GMT+01:00) | Prague                       |\n| (GMT+01:00) | Rome                         |\n| (GMT+01:00) | Sarajevo                     |\n| (GMT+01:00) | Skopje                       |\n| (GMT+01:00) | Stockholm                    |\n| (GMT+01:00) | Vienna                       |\n| (GMT+01:00) | Warsaw                       |\n| (GMT+01:00) | West Central Africa          |\n| (GMT+01:00) | Zagreb                       |\n| (GMT+02:00) | Athens                       |\n| (GMT+02:00) | Bucharest                    |\n| (GMT+02:00) | Cairo                        |\n| (GMT+02:00) | Harare                       |\n| (GMT+02:00) | Helsinki                     |\n| (GMT+02:00) | Istanbul                     |\n| (GMT+02:00) | Jerusalem                    |\n| (GMT+02:00) | Kyiv                         |\n| (GMT+02:00) | Pretoria                     |\n| (GMT+02:00) | Riga                         |\n| (GMT+02:00) | Sofia                        |\n| (GMT+02:00) | Tallinn                      |\n| (GMT+02:00) | Vilnius                      |\n| (GMT+03:00) | Baghdad                      |\n| (GMT+03:00) | Kuwait                       |\n| (GMT+03:00) | Minsk                        |\n| (GMT+03:00) | Nairobi                      |\n| (GMT+03:00) | Riyadh                       |\n| (GMT+03:30) | Tehran                       |\n| (GMT+04:00) | Abu Dhabi                    |\n| (GMT+04:00) | Baku                         |\n| (GMT+04:00) | Moscow                       |\n| (GMT+04:00) | Muscat                       |\n| (GMT+04:00) | St. Petersburg               |\n| (GMT+04:00) | Tbilisi                      |\n| (GMT+04:00) | Volgograd                    |\n| (GMT+04:00) | Yerevan                      |\n| (GMT+04:30) | Kabul                        |\n| (GMT+05:00) | Islamabad                    |\n| (GMT+05:00) | Karachi                      |\n| (GMT+05:00) | Tashkent                     |\n| (GMT+05:30) | Chennai                      |\n| (GMT+05:30) | Kolkata                      |\n| (GMT+05:30) | Mumbai                       |\n| (GMT+05:30) | New Delhi                    |\n| (GMT+05:30) | Sri Jayawardenepura          |\n| (GMT+05:45) | Kathmandu                    |\n| (GMT+06:00) | Almaty                       |\n| (GMT+06:00) | Astana                       |\n| (GMT+06:00) | Dhaka                        |\n| (GMT+06:00) | Ekaterinburg                 |\n| (GMT+06:30) | Rangoon                      |\n| (GMT+07:00) | Bangkok                      |\n| (GMT+07:00) | Hanoi                        |\n| (GMT+07:00) | Jakarta                      |\n| (GMT+07:00) | Novosibirsk                  |\n| (GMT+08:00) | Beijing                      |\n| (GMT+08:00) | Chongqing                    |\n| (GMT+08:00) | Hong Kong                    |\n| (GMT+08:00) | Krasnoyarsk                  |\n| (GMT+08:00) | Kuala Lumpur                 |\n| (GMT+08:00) | Perth                        |\n| (GMT+08:00) | Singapore                    |\n| (GMT+08:00) | Taipei                       |\n| (GMT+08:00) | Ulaan Bataar                 |\n| (GMT+08:00) | Urumqi                       |\n| (GMT+09:00) | Irkutsk                      |\n| (GMT+09:00) | Osaka                        |\n| (GMT+09:00) | Sapporo                      |\n| (GMT+09:00) | Seoul                        |\n| (GMT+09:00) | Tokyo                        |\n| (GMT+09:30) | Adelaide                     |\n| (GMT+09:30) | Darwin                       |\n| (GMT+10:00) | Brisbane                     |\n| (GMT+10:00) | Canberra                     |\n| (GMT+10:00) | Guam                         |\n| (GMT+10:00) | Hobart                       |\n| (GMT+10:00) | Melbourne                    |\n| (GMT+10:00) | Port Moresby                 |\n| (GMT+10:00) | Sydney                       |\n| (GMT+10:00) | Yakutsk                      |\n| (GMT+11:00) | New Caledonia                |\n| (GMT+11:00) | Vladivostok                  |\n| (GMT+12:00) | Auckland                     |\n| (GMT+12:00) | Fiji                         |\n| (GMT+12:00) | Kamchatka                    |\n| (GMT+12:00) | Magadan                      |\n| (GMT+12:00) | Marshall Is.                 |\n| (GMT+12:00) | Solomon Is.                  |\n| (GMT+12:00) | Wellington                   |\n| (GMT+13:00) | Nuku'alofa                   |\n| (GMT+13:00) | Samoa                        |\n| (GMT+13:00) | Tokelau Is.                  |\n",
    "termsOfService": "https://resourceguruapp.com/terms",
    "version": "1.0.0",
    "x-logo": {
      "url": "https://cdn.resourceguruapp.com/assets/logo-footer-214f7f72b8079386a13ceac82c2b2408de8ab9ba8bda889e57256c91ad2532e2.svg",
      "backgroundColor": "#40264d",
      "altText": "Resource Guru"
    }
  },
  "servers": [
    {
      "url": "https://api.resourceguruapp.com",
      "description": "Resource Guru public API"
    }
  ],
  "paths": {
    "/v1/accounts/{id}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Get account",
        "description": "Returns details for the specific account by its unique identifier.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the account.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissionsPlain"
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "500": {
            "$ref": "#/components/responses/GeneralErrorPlain"
          }
        }
      }
    },
    "/v1/accounts": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "List accounts",
        "description": "Returns an array of active accounts and suspended accounts.",
        "responses": {
          "200": {
            "description": "A list of summarised accounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountSummaries"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/GeneralErrorPlain"
          }
        }
      }
    },
    "/v1/{account}/bookings": {
      "get": {
        "tags": [
          "booking"
        ],
        "summary": "List bookings",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "$ref": "#/components/parameters/booking_start_date"
          },
          {
            "$ref": "#/components/parameters/booking_end_date"
          },
          {
            "name": "calendar",
            "in": "query",
            "description": "Include all related days for the booking that match our query.",
            "schema": {
              "$ref": "#/components/schemas/GetBookingsParameters/properties/calendar"
            },
            "example": 1
          },
          {
            "name": "resource_ids",
            "in": "query",
            "description": "Include bookings only for these specified resources. Set this parameter multiple times to include bookings for more than one resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/GetBookingsParameters/properties/resource_ids"
            }
          },
          {
            "name": "booker_id",
            "in": "query",
            "description": "Only return bookings that were booked by the given User ID. Return only my bookings when using the special value `booker_id=me`.",
            "schema": {
              "$ref": "#/components/schemas/GetBookingsParameters/properties/booker_id"
            }
          },
          {
            "name": "waiting",
            "in": "query",
            "description": "If set to `1`, only bookings that are currently on the waiting list are returned. If set to `0`, all bookings are returned.",
            "example": "1",
            "schema": {
              "type": "string",
              "enum": [
                "0",
                "1"
              ],
              "example": "0",
              "default": "0"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of bookings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bookings"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      },
      "post": {
        "tags": [
          "booking"
        ],
        "summary": "Create booking",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          }
        ],
        "requestBody": {
          "description": "The information for the new booking.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBooking"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The booking that was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Booking"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BookingClash"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/bookings/{id}": {
      "get": {
        "tags": [
          "booking"
        ],
        "description": "Returns a specific booking by its unique identifier.",
        "summary": "Get booking",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the booking.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested booking",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Booking"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      },
      "put": {
        "tags": [
          "booking"
        ],
        "description": "Update a specific booking by its unique identifier.",
        "summary": "Update booking",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the booking.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          },
          {
            "$ref": "#/components/parameters/affects"
          }
        ],
        "requestBody": {
          "description": "The information to update in the existing booking.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBooking"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated booking",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Booking"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BookingClash"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      },
      "delete": {
        "tags": [
          "booking"
        ],
        "description": "Delete a specific booking by its unique identifier.",
        "summary": "Delete booking",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the booking.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          },
          {
            "$ref": "#/components/parameters/affects"
          }
        ],
        "requestBody": {
          "description": "The information to update in the existing booking",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveBooking"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The booking is deleted successfully"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/bookings/{id}/split": {
      "post": {
        "tags": [
          "booking"
        ],
        "description": "Split a specific booking on a given date.",
        "summary": "Split booking",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the booking.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        ],
        "requestBody": {
          "description": "The information for splitting a booking",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SplitBooking"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The existing booking along with the new booking created by the split operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bookings"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BookingClash"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/clients/{id}/bookings": {
      "get": {
        "tags": [
          "booking"
        ],
        "summary": "List client bookings",
        "description": "Search bookings for a specific client.",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the booking.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          },
          {
            "$ref": "#/components/parameters/booking_start_date"
          },
          {
            "$ref": "#/components/parameters/booking_end_date"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of bookings for this client",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bookings"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/projects/{id}/bookings": {
      "get": {
        "tags": [
          "booking"
        ],
        "description": "Search bookings for a specific project.",
        "summary": "List project bookings",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the booking.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          },
          {
            "$ref": "#/components/parameters/booking_start_date"
          },
          {
            "$ref": "#/components/parameters/booking_end_date"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of bookings for this project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bookings"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/resources/{id}/bookings": {
      "get": {
        "tags": [
          "booking"
        ],
        "description": "Search bookings for a specific resource.",
        "summary": "List resource bookings",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the booking.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          },
          {
            "$ref": "#/components/parameters/booking_start_date"
          },
          {
            "$ref": "#/components/parameters/booking_end_date"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of bookings for this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bookings"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/clients": {
      "get": {
        "tags": [
          "client"
        ],
        "description": "Returns an array of active clients.",
        "summary": "List active clients",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "$ref": "#/components/parameters/limitWithDefault"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "includeArchived",
            "in": "query",
            "description": "Whether to include archived clients. Limit and offset parameters are ignored when includeArchived is set.",
            "schema": {
              "enum": [
                "0",
                "1"
              ],
              "type": "string",
              "default": "0"
            }
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "description": "Whether to include deleted clients. Limit and offset parameters are ignored when includeDeleted is set.",
            "schema": {
              "enum": [
                "0",
                "1"
              ],
              "type": "string",
              "default": "0"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of clients",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Clients"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      },
      "post": {
        "tags": [
          "client"
        ],
        "description": "Create a new client",
        "summary": "Create client",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          }
        ],
        "requestBody": {
          "description": "The information for the new client",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewClient"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The client was successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/clients/archived": {
      "get": {
        "tags": [
          "client"
        ],
        "description": "Returns an array of archived clients",
        "summary": "List archived clients",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "$ref": "#/components/parameters/limitWithDefault"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of clients",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Clients"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/clients/{id}": {
      "get": {
        "tags": [
          "client"
        ],
        "description": "Returns a specific client",
        "summary": "Get client",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the client.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A client",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      },
      "put": {
        "tags": [
          "client"
        ],
        "description": "Update a client",
        "summary": "Update client",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the client.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        ],
        "requestBody": {
          "description": "The information to update in the existing client",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClient"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated client",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      },
      "delete": {
        "tags": [
          "client"
        ],
        "description": "Delete a client",
        "summary": "Delete client",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the client.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Indicates successful deletion of the client"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/downtimes": {
      "get": {
        "tags": [
          "downtime"
        ],
        "description": "Search for downtime events.",
        "summary": "List downtimes",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "name": "resource_ids",
            "in": "query",
            "description": "Include downtime events only for the specified resources.",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/GetDowntimesParameters/properties/resource_ids"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Include only downtime events starting on or after this date.",
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            },
            "example": "2020-01-01"
          },
          {
            "name": "to",
            "in": "query",
            "description": "Include only downtime events ending on or before this date.",
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            },
            "example": "2020-01-01"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of downtime events matching the search criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Downtimes"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      },
      "post": {
        "tags": [
          "downtime"
        ],
        "description": "Create a new downtime event.",
        "summary": "Create downtime",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          }
        ],
        "requestBody": {
          "description": "The information for the new downtime event.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewDowntime"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The downtime that was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Downtime"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DowntimeClash"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/downtimes/clashes": {
      "post": {
        "tags": [
          "downtime"
        ],
        "description": "Gets a list of clashing booking durations for resources in a time range. This can be used to determine whether creating a downtime will result in changes to schedule bookings.",
        "summary": "List downtime clashes",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          }
        ],
        "requestBody": {
          "description": "The search criteria.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DowntimeClashes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A list of clashing booking durations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DowntimeClashResponse/properties/clashes"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/downtimes/{id}": {
      "get": {
        "tags": [
          "downtime"
        ],
        "description": "Get a downtime event by its unique identifier.",
        "summary": "Get downtime",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the downtime.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The downtime event",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Downtime"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      },
      "put": {
        "tags": [
          "downtime"
        ],
        "description": "Update a downtime event.",
        "summary": "Update downtime",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the downtime.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        ],
        "requestBody": {
          "description": "The information to update in the existing downtime.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDowntime"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated downtime event",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Downtime"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DowntimeClash"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      },
      "delete": {
        "tags": [
          "downtime"
        ],
        "description": "Delete a downtime event.",
        "summary": "Delete downtime",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the downtime.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Indicates successful deletion of the downtime event"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/downtimes/{id}/split": {
      "post": {
        "tags": [
          "downtime"
        ],
        "description": "Splits a downtime event (not a valid operation for Holiday/Vacation).",
        "summary": "Split downtime",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the downtime.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        ],
        "requestBody": {
          "description": "The date to split the downtime event",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SplitDowntime"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "An array containing the original and additional downtime events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Downtime"
                  },
                  "minItems": 2,
                  "maxItems": 2
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/downtime_types": {
      "get": {
        "tags": [
          "downtime"
        ],
        "description": "Retrieve the list of downtime event types.",
        "summary": "List downtime types",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of downtime event types",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DowntimeTypes"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/projects": {
      "get": {
        "tags": [
          "project"
        ],
        "description": "Returns an array of active projects.",
        "summary": "List active projects",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "$ref": "#/components/parameters/limitWithDefault"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "includeArchived",
            "in": "query",
            "description": "Send `includeArchived=1` to include archived projects. Limit and offset parameters are ignored when includeArchived is set.",
            "schema": {
              "enum": [
                "0",
                "1"
              ],
              "type": "string",
              "default": "0"
            }
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "description": "Send `includeDeleted=1` to include deleted projects. Limit and offset parameters are ignored when includeDeleted is set.",
            "schema": {
              "enum": [
                "0",
                "1"
              ],
              "type": "string",
              "default": "0"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of project summaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectSummaries"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      },
      "post": {
        "tags": [
          "project"
        ],
        "description": "Create a new project.",
        "summary": "Create project",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          }
        ],
        "requestBody": {
          "description": "The information for the new project.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewProject"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The project was successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/projects/archived": {
      "get": {
        "tags": [
          "project"
        ],
        "description": "Returns an array of archived projects.",
        "summary": "List archived projects",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "$ref": "#/components/parameters/limitWithDefault"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of project summaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectSummaries"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/projects/{id}": {
      "get": {
        "tags": [
          "project"
        ],
        "description": "Returns a specific project.",
        "summary": "Get project",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the project.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      },
      "put": {
        "tags": [
          "project"
        ],
        "description": "Update a project.",
        "summary": "Update project",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the project.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        ],
        "requestBody": {
          "description": "The information to update in the existing project",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      },
      "delete": {
        "tags": [
          "project"
        ],
        "description": "Delete a project.",
        "summary": "Delete project",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the project.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Indicates successful deletion of the project"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/reports/projects": {
      "get": {
        "description": "Gets a report for all projects in the date range.",
        "summary": "Get report of projects",
        "tags": [
          "report"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "description": "The beginning of the date range to report on.",
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          },
          {
            "description": "The end of the date range to report on.",
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The projects report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectsReportV1"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/reports/projects/{id}": {
      "get": {
        "description": "Gets a report for the specified project in the date range.",
        "summary": "Get report of a project",
        "tags": [
          "report"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "$ref": "#/components/parameters/reportable_id"
          },
          {
            "description": "The beginning of the date range to report on.",
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          },
          {
            "description": "The end of the date range to report on.",
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The project report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectReportV1"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/reports/clients": {
      "get": {
        "description": "Gets a report for all clients in the date range.",
        "summary": "Get report of clients",
        "tags": [
          "report"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "description": "The beginning of the date range to report on.",
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          },
          {
            "description": "The end of the date range to report on.",
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The clients report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientsReportV1"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/reports/clients/{id}": {
      "get": {
        "description": "Gets a report for the specified client in the date range.",
        "summary": "Get report of a client",
        "tags": [
          "report"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "$ref": "#/components/parameters/reportable_id"
          },
          {
            "description": "The beginning of the date range to report on.",
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          },
          {
            "description": "The end of the date range to report on.",
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The client report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientReportV1"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/reports/resources": {
      "get": {
        "description": "Gets a report for all resources in the date range.",
        "summary": "Get report of resources",
        "tags": [
          "report"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "description": "The beginning of the date range to report on.",
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          },
          {
            "description": "The end of the date range to report on.",
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The resources report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcesReportV1"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/reports/resources/{id}": {
      "get": {
        "description": "Gets a report for a specific resource in the date range.",
        "summary": "Get report of a resource",
        "tags": [
          "report"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the resource.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          },
          {
            "description": "The beginning of the date range to report on.",
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          },
          {
            "description": "The end of the date range to report on.",
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The resource report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceReportV1"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v2/{account}/reports/resources": {
      "get": {
        "description": "Gets a report for all resources in the date range.",
        "summary": "Get report of resources",
        "tags": [
          "report-v2"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "description": "The beginning of the date range to report on.",
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          },
          {
            "description": "The end of the date range to report on.",
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The resources report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcesReportV2"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v2/{account}/reports/resources/{id}": {
      "get": {
        "description": "Gets a report for a single resource in the date range.",
        "summary": "Get report of a resource",
        "tags": [
          "report-v2"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the resource.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          },
          {
            "description": "The beginning of the date range to report on.",
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          },
          {
            "description": "The end of the date range to report on.",
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The resource report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceReportV2"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v2/{account}/reports/clients": {
      "get": {
        "description": "Gets a report for all clients in the date range.",
        "summary": "Get report of clients",
        "tags": [
          "report-v2"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "description": "The beginning of the date range to report on.",
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          },
          {
            "description": "The end of the date range to report on.",
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The clients report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientsReportV2"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v2/{account}/reports/clients/{id}": {
      "get": {
        "description": "Gets a report for a single client in the date range.",
        "summary": "Get report of a client",
        "tags": [
          "report-v2"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the client.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          },
          {
            "description": "The beginning of the date range to report on.",
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          },
          {
            "description": "The end of the date range to report on.",
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The client report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientReportV2"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v2/{account}/reports/clients/unassigned": {
      "get": {
        "description": "Gets a report on bookings not assigned to a client in the date range.",
        "summary": "Get report of bookings with no clients",
        "tags": [
          "report-v2"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "description": "The beginning of the date range to report on.",
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          },
          {
            "description": "The end of the date range to report on.",
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The unassigned client report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientUnassignedReport"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v2/{account}/reports/projects": {
      "get": {
        "description": "Gets a report for all projects in the date range.",
        "summary": "Get report of projects",
        "tags": [
          "report-v2"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "description": "The beginning of the date range to report on.",
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          },
          {
            "description": "The end of the date range to report on.",
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The projects report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectsReportV2"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v2/{account}/reports/projects/{id}": {
      "get": {
        "description": "Gets a report for a single project in the date range.",
        "summary": "Get report of a project",
        "tags": [
          "report-v2"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the project.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          },
          {
            "description": "The beginning of the date range to report on.",
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          },
          {
            "description": "The end of the date range to report on.",
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The project report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectReportV2"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v2/{account}/reports/projects/unassigned": {
      "get": {
        "description": "Gets a report on bookings not assigned to a project in the date range.",
        "summary": "Get report of bookings with no project",
        "tags": [
          "report-v2"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "description": "The beginning of the date range to report on.",
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          },
          {
            "description": "The end of the date range to report on.",
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISODateString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The unassigned project report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectUnassignedReport"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/resources": {
      "get": {
        "tags": [
          "resource"
        ],
        "summary": "List active resources",
        "description": "Returns an array of active resources",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "$ref": "#/components/parameters/limitWithDefault"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "detail",
            "in": "query",
            "description": "Whether to include extra information about the resource.",
            "schema": {
              "enum": [
                "0",
                "1"
              ],
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Return only the resources specified in this array",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityId"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of resources",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Resources"
                    },
                    {
                      "$ref": "#/components/schemas/ResourceSummaries"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      },
      "post": {
        "tags": [
          "resource"
        ],
        "description": "Create a new resource.  The availability will be created with the default availability settings set within the app",
        "summary": "Create resource",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          }
        ],
        "requestBody": {
          "description": "The information for the new resource",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewResource"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The resource was successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/resources/archived": {
      "get": {
        "tags": [
          "resource"
        ],
        "description": "Returns an array of archived resources",
        "summary": "List archived resources",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "$ref": "#/components/parameters/limitWithDefault"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "detail",
            "in": "query",
            "description": "Whether to include extra information about the resource.",
            "schema": {
              "enum": [
                "0",
                "1"
              ],
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Return only the resources specified in this array",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityId"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of resources",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Resources"
                    },
                    {
                      "$ref": "#/components/schemas/ResourceSummaries"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/resources/{id}": {
      "get": {
        "tags": [
          "resource"
        ],
        "description": "Returns details of a specific resource",
        "summary": "Get resource",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the resource.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      },
      "put": {
        "tags": [
          "resource"
        ],
        "description": "Update a resource",
        "summary": "Update resource",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the resource.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        ],
        "requestBody": {
          "description": "The information to update in the existing resource",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateResource"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      },
      "delete": {
        "tags": [
          "resource"
        ],
        "description": "Delete a resource. Any future bookings where the resource is the booker will be transferred to the authenticated user. And any future bookings where the resource has been booked as the resource will be deleted.",
        "summary": "Delete resource",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the resource.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Indicates successful deletion of the resource"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/resources/availability": {
      "post": {
        "tags": [
          "resource"
        ],
        "description": "Update normal availability and/or timezone for a resource ",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          }
        ],
        "requestBody": {
          "description": "The new availability information",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAvailability"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The availability change was successful"
          },
          "400": {
            "$ref": "#/components/responses/AvailabilityClash"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/resource_types": {
      "get": {
        "tags": [
          "resource"
        ],
        "description": "Returns an array of resource types",
        "summary": "List resource types",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of resource types",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceTypes"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/resource_types/{id}": {
      "get": {
        "tags": [
          "resource"
        ],
        "summary": "Get resource type",
        "description": "Returns a specific resource type",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the resource type.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A resource type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceType"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/overtimes": {
      "post": {
        "tags": [
          "overtime"
        ],
        "description": "Set the overtime for a resource on a specified date",
        "summary": "Set overtime",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          }
        ],
        "requestBody": {
          "description": "The information for the overtime",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewOvertime"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The record was created successfully"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/users": {
      "get": {
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "$ref": "#/components/parameters/limitWithDefault"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "description": "Returns all active users for this account.",
        "summary": "List active users",
        "responses": {
          "200": {
            "description": "An array of active users for this account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/users/all": {
      "get": {
        "tags": [
          "user"
        ],
        "description": "Returns information about all active and deleted users for the account.",
        "summary": "List users",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          }
        ],
        "responses": {
          "200": {
            "description": "All active and deleted users for the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/me": {
      "get": {
        "tags": [
          "user"
        ],
        "description": "Returns a summary about the currently authenticated user.",
        "summary": "Get my user summary",
        "responses": {
          "200": {
            "description": "A summary of the currently authenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/users/me": {
      "get": {
        "tags": [
          "user"
        ],
        "description": "Returns information about the currently authenticated user in the context of an account.",
        "summary": "Get my user details",
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          }
        ],
        "responses": {
          "200": {
            "description": "The currently authenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/users/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the user.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        ],
        "description": "Returns information about the specified user.",
        "summary": "Get user",
        "responses": {
          "200": {
            "description": "The user specified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/webhooks": {
      "get": {
        "description": "Returns a list of webhooks configured for this account",
        "summary": "List webhooks",
        "tags": [
          "webhook"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of webhooks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhooks"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      },
      "post": {
        "description": "Create a new webhook",
        "summary": "Create webhook",
        "tags": [
          "webhook"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          }
        ],
        "requestBody": {
          "description": "The information for the webhook",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The record was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/webhooks/test-payload-url": {
      "post": {
        "description": "Sends a test payload to the specified URL and responds with the status code of the request",
        "summary": "Send test payload",
        "tags": [
          "webhook"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          }
        ],
        "requestBody": {
          "description": "The URL we want to test",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookTestPayloadUrl"
              }
            }
          }
        },
        "responses": {
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "description": "Returned if we encounter a network or timeout error when POSTing to the specified URL"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          },
          "default": {
            "description": "The endpoint returns as a status code whatever status code we received from the test URL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookTestPayloadUrlResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{account}/webhooks/{id}": {
      "get": {
        "description": "Retrieves a single webhook",
        "summary": "Get webhook",
        "tags": [
          "webhook"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the webhook.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested webhook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      },
      "put": {
        "description": "Updates a webhook",
        "summary": "Update webhook",
        "tags": [
          "webhook"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the webhook.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        ],
        "requestBody": {
          "description": "The parameters we want to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated webhook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      },
      "delete": {
        "description": "Deletes a webhook",
        "summary": "Delete webhook",
        "tags": [
          "webhook"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the webhook.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The webhook was deleted successfully"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/webhooks/{id}/test": {
      "post": {
        "description": "Tests a webhook and returns the status, or a 500 if there are problems connecting to the URL",
        "summary": "Test webhook",
        "tags": [
          "webhook"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the webhook.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A string containing the status code returned in response to our payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "status: 200"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/webhooks/{id}/queue": {
      "get": {
        "description": "Payloads are created for webhooks once any interaction with the application takes place.\n        All payloads are created immediately once an action is performed for webhooks that are subscribed to that action.",
        "summary": "Get webhook payloads",
        "tags": [
          "webhook"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the webhook.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of webhook payloads",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookPayload"
                  },
                  "example": [
                    {
                      "id": 1,
                      "account_id": 1,
                      "webhook_id": 1,
                      "model": {
                        "id": 1,
                        "timestamp": 1423469363,
                        "payload": {
                          "id": 1234,
                          "archived": false,
                          "color": null,
                          "name": "A client",
                          "notes": "",
                          "created_at": "2015-02-05T18:44:36.000Z",
                          "updated_at": "2015-02-09T08:09:22.547Z",
                          "action": "delete",
                          "type": "client"
                        }
                      },
                      "user": {
                        "id": 1,
                        "name": "Shaun Prestor",
                        "email": "shaun@example.com"
                      },
                      "action": "delete",
                      "attempts": 1,
                      "status": "delivered",
                      "last_sent_on": "2015-02-09T08:09:24.292Z",
                      "created_at": "2015-02-09T08:09:23.047Z",
                      "request_headers": {
                        "User-Agent": "ResourceGuru/Webhooks",
                        "Content-Type": "application/json",
                        "X-ResourceGuru-Key": "secret",
                        "X-ResourceGuru-Signature": "41812cd012a1abd5a594d8633ebb5501a5cb0d3ee56bb4a4069b9f9e3bf962d6"
                      },
                      "response_from_http_client": 201,
                      "next_try": null
                    },
                    {
                      "id": 2,
                      "account_id": 1,
                      "webhook_id": 1,
                      "model": {
                        "id": 1,
                        "timestamp": 1423472753,
                        "payload": {
                          "id": 1234,
                          "archived": false,
                          "color": null,
                          "name": "A client",
                          "notes": "",
                          "created_at": "2015-02-04T16:40:23.000Z",
                          "updated_at": "2015-02-09T09:05:53.581Z",
                          "action": "delete",
                          "type": "client"
                        }
                      },
                      "user": {
                        "id": 1,
                        "name": "Shaun Prestor",
                        "email": "shaun@example.com"
                      },
                      "action": "delete",
                      "attempts": 1,
                      "status": "delivered",
                      "last_sent_on": "2015-02-09T09:05:55.185Z",
                      "created_at": "2015-02-09T09:05:53.684Z",
                      "request_headers": {
                        "User-Agent": "ResourceGuru/Webhooks",
                        "Content-Type": "application/json",
                        "X-ResourceGuru-Key": "secret",
                        "X-ResourceGuru-Signature": "d0537e5b65fdd97c3722f53569ba2e89335889fa25f235c5d864f1d9422ec400"
                      },
                      "response_from_http_client": 201,
                      "next_try": null
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/v1/{account}/webhooks/{id}/send_payload_batch": {
      "put": {
        "description": "Will attempt to resend a previously sent payload to a webhook",
        "summary": "Re-send webhook payload",
        "tags": [
          "webhook"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/account"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the webhook.",
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contains the unique identifier of the payload that we want to re-send",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookSendPayloadBatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "We attempted to re-send the payload"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/EntityNotFound"
          },
          "500": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "account",
      "description": "Operations for retrieving accounts.",
      "x-displayName": "Accounts"
    },
    {
      "name": "booking",
      "description": "Operations for creating, retrieving or modifying the bookings for an account.",
      "x-displayName": "Bookings"
    },
    {
      "name": "client",
      "description": "Operations for creating, retrieving or modifying the clients and associated entities for an account.",
      "x-displayName": "Clients"
    },
    {
      "name": "downtime",
      "description": "Operations for creating, retrieving or modifying the downtime events for an account.",
      "x-displayName": "Downtimes"
    },
    {
      "name": "overtime",
      "description": "Operations for setting overtime on a resource",
      "x-displayName": "Overtime"
    },
    {
      "name": "project",
      "description": "Operations for creating, retrieving or modifying the projects and associated entities for an account.",
      "x-displayName": "Projects"
    },
    {
      "name": "report",
      "description": "Operations for retrieving reporting information.",
      "x-displayName": "Reports – v1 (deprecated)"
    },
    {
      "name": "report-v2",
      "description": "Operations for retrieving reporting information.",
      "x-displayName": "Reports – v2"
    },
    {
      "name": "resource",
      "description": "Operations for creating, retrieving or modifying the resources and associated entities for an account",
      "x-displayName": "Resources"
    },
    {
      "name": "user",
      "description": "Operations for creating, retrieving or modifying users.",
      "x-displayName": "Users"
    },
    {
      "name": "webhook",
      "description": "Resource Guru supports integration with other services using outgoing webhooks. In a nutshell, webhooks provide a way\nfor Resource Guru to send real-time information to other apps. For example, when a booking is made in Resource Guru,\nwebhooks can be used to post information (payloads) about that booking to a payload (receiving) URL. Getting this\ninformation was always possible via our basic API, but webhooks proactively post the changes instead. This means that\napps no longer need to keep polling the API to check what's changed - resulting in much greater efficiency.\n\nAccount owners and users with administrative privileges can create new webhooks either via the API endpoint or via\nsettings in their Resource Guru account. Simply specify the name of the webhook, the payload URL which receives the\npayloads, and the types of events which should be sent to the payload URL. For added security, you can provide a secret\nstring which will be combined with the payload's request body to create a HMAC SHA256 digest and added as a request\nheader.\n\nThe supported event types are:\n\n- Bookings\n- Clients\n- Projects\n- Resources\n- Resource Types\n- Accounts\n- Time Off\n\nAs soon as changes are made within a relevant Resource Guru acccout, payloads are sent immediately for any of the events\nthat have been subscribed to in the webhook. We will automatically try to deliver a payload 100 times before marking it\nas failed. More detail on payload statuses can be found in the [payloads endpoint documentation](#tag/webhook/paths/~1v1~1{account}~1webhooks~1{id}~1queue/get).\nPayloads are dropped from Resource Guru's history after 30 days. **Unsuccessful payloads will be lost after failing for\n30 days**.\n\nPayloads are sent as JSON with the following headers:\n\nHeader | Description\n--- | ---\nUser-Agent | The string `ResourceGuru/Webhooks` identifies Resource Guru as the sender.\nContent-Type | The string `application/json` identifies the content type of the payload.\nX-ResourceGuru-Key | The secret provided when creating the webhook. This is only sent if a webhook secret is set.\nX-ResourceGuru-Signature | A HMAC SHA256 digest of the request body, signed by the webhook secret. This is only sent if a webhook secret is set.\n\nThe signature is generated on our side using the OpenSSL library using the following code:\n\n``` ruby\nOpenSSL::HMAC.hexdigest(OpenSSL::Digest.new('sha256'), webhook_secret, request_body)\n```\n\n## Payload format\n\nPayloads are sent as JSON.\n\nKey | Type |Description\n--- | --- |---\nid  | integer | Each payload has a unique incrementing ID\ntimestamp | integer | A UNIX epoch timestamp when the event occurred.\npayload | object | Format varies based on the type of event. We use the same formatting as in the API for each type of object. The keys `action` and `type` are added.\n\nThe payload `action` will be one of:\n\n- create\n- update\n- delete\n\nThe payload `type` will be one of:\n\n- account\n- booking\n- client\n- project\n- resource\n- resource_type\n- downtime (Time Off)\n\nAn example payload when a new client is created:\n\n``` js\n{\n  \"id\": 1,\n  \"timestamp\": 1423472753,\n  \"payload\": {\n    \"id\": 1234,\n    \"archived\": false,\n    \"color\": null,\n    \"name\": \"A client\",\n    \"notes\": \"Some notes\",\n    \"created_at\": \"2015-02-04T16:40:23.000Z\",\n    \"updated_at\":\"2015-02-09T09:05:53.581Z\",\n    \"action\": \"create\",\n    \"type\": \"client\"\n  }\n}\n```\n",
      "x-displayName": "Webhooks"
    }
  ],
  "components": {
    "schemas": {
      "Account": {
        "title": "Account response",
        "description": "Response representing a single account.",
        "type": "object",
        "additionalProperties": false,
        "required": [],
        "properties": {
          "id": {
            "description": "The unique identifier of the account.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "The account name.",
            "example": "Example Corp"
          },
          "subdomain": {
            "type": "string",
            "maxLength": 255,
            "description": "The Account URL ID for the account. The account could previously be accessed on this subdomain.",
            "example": "example-corp"
          },
          "plan": {
            "type": "string",
            "maxLength": 255,
            "description": "The subscription plan code for this account.",
            "enum": [
              "grasshopper_monthly",
              "grasshopper_annual",
              "blackbelt_monthly",
              "blackbelt_annual",
              "master_monthly",
              "master_annual",
              "basic",
              "mini",
              "premium",
              "premiumplus"
            ],
            "example": "grasshopper_annual"
          },
          "created_at": {
            "description": "The date and time when this account was created.",
            "example": "2020-12-31T14:29:29.000Z",
            "type": "string",
            "format": "iso-date-time-string"
          },
          "updated_at": {
            "description": "The date and time when this account was last updated.",
            "example": "2020-12-31T14:29:29.000Z",
            "type": "string",
            "format": "iso-date-time-string"
          },
          "projects": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "count",
              "url"
            ],
            "description": "Summary of projects in the account.",
            "properties": {
              "count": {
                "description": "The number of projects for this account.",
                "type": "integer",
                "minimum": 0,
                "example": 50
              },
              "url": {
                "description": "The URL to access the projects of this account.",
                "type": "string",
                "example": "https://api.resourceguruapp.com/v1/example-corp/projects"
              }
            }
          },
          "clients": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "count",
              "url"
            ],
            "description": "Summary of clients in the account.",
            "properties": {
              "count": {
                "description": "The number of clients for this account.",
                "type": "integer",
                "minimum": 0,
                "example": 20
              },
              "url": {
                "description": "The URL to access the clients of this account.",
                "type": "string",
                "example": "https://api.resourceguruapp.com/v1/example-corp/clients"
              }
            }
          },
          "resources": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "count",
              "url"
            ],
            "description": "Summary of resources in the account.",
            "properties": {
              "count": {
                "description": "The number of resources for this account.",
                "type": "integer",
                "minimum": 0,
                "example": 12
              },
              "url": {
                "description": "The URL to access the resources of this account.",
                "type": "string",
                "example": "https://api.resourceguruapp.com/v1/example-corp/clients"
              }
            }
          },
          "owner": {
            "description": "The owner of this account.",
            "type": "object",
            "additionalProperties": false,
            "required": [
              "name",
              "email",
              "image",
              "timezone"
            ],
            "properties": {
              "name": {
                "type": "string",
                "maxLength": 255,
                "description": "The name of the account owner.",
                "example": "John Doe"
              },
              "email": {
                "type": "string",
                "maxLength": 255,
                "example": "email@resourceguruapp.com",
                "description": "The email of the account owner."
              },
              "image": {
                "description": "The profile image url of the account owner.",
                "type": "string",
                "example": "https://resourceguru.s3.amazonaws.com/images/example.png"
              },
              "timezone": {
                "description": "The timezone of the account owner.",
                "type": "string",
                "example": "UTC"
              }
            }
          }
        }
      },
      "AccountSummary": {
        "title": "Account summary response",
        "description": "Response representing the summary of an account.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "subdomain",
          "rootdomain",
          "url",
          "dashboard_path",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Account/properties/id"
          },
          "name": {
            "$ref": "#/components/schemas/Account/properties/name"
          },
          "subdomain": {
            "$ref": "#/components/schemas/Account/properties/subdomain"
          },
          "rootdomain": {
            "type": "string",
            "maxLength": 255,
            "description": "The root domain this account is served from."
          },
          "url": {
            "description": "The URL to view this account in the API.",
            "type": "string",
            "example": "https://api.resourceguruapp.com/v1/accounts/1"
          },
          "dashboard_path": {
            "description": "The relative path to the dashboard of this account.",
            "type": "string",
            "example": "/hi/example-corp"
          },
          "created_at": {
            "description": "The date and time when this account was created.",
            "example": "2020-12-31T14:29:29.000Z",
            "type": "string",
            "format": "iso-date-time-string"
          },
          "updated_at": {
            "description": "The date and time when this account was last updated.",
            "example": "2020-12-31T14:29:29.000Z",
            "type": "string",
            "format": "iso-date-time-string"
          }
        }
      },
      "AccountSummaries": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/AccountSummary"
        }
      },
      "Booking": {
        "title": "Booking response",
        "description": "Response representing a single booking.",
        "type": "object",
        "additionalProperties": false,
        "required": [],
        "properties": {
          "id": {
            "description": "The unique identifier of the booking.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "resource_id": {
            "description": "The unique identifier of the booked resource.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "resource_ids": {
            "type": "array",
            "items": {
              "description": "A unique identifier for an entity.",
              "type": "integer",
              "minimum": 1,
              "example": 1
            },
            "minItems": 1
          },
          "booker": {
            "description": "The user who created the booking.",
            "type": "object",
            "additionalProperties": false,
            "required": [
              "id",
              "name",
              "email",
              "color"
            ],
            "properties": {
              "id": {
                "description": "The unique identifier of the user who booked the resource.",
                "type": "integer",
                "minimum": 1,
                "example": 1
              },
              "email": {
                "type": "string",
                "maxLength": 255,
                "example": "email@resourceguruapp.com",
                "description": "The email address of the booker."
              },
              "name": {
                "type": "string",
                "maxLength": 255,
                "description": "The name of the booker.",
                "example": "Joe Bloggs"
              },
              "color": {
                "description": "The color used to highlight this booker.",
                "type": "string",
                "pattern": "^#[a-fA-F0-9]{6}$",
                "example": "#c0ffee"
              }
            }
          },
          "start_date": {
            "description": "First date of the booking.",
            "example": "2020-12-31",
            "type": "string",
            "format": "iso-date-string"
          },
          "end_date": {
            "description": "Last date of the booking.",
            "example": "2020-12-31",
            "type": "string",
            "format": "iso-date-string"
          },
          "duration": {
            "type": "integer",
            "minimum": 1,
            "maximum": 1440,
            "description": "The length of each booking in minutes",
            "example": 60
          },
          "start_time": {
            "description": "A time represented by the number of minutes elapsed since midnight",
            "nullable": true,
            "type": "integer",
            "minimum": 0,
            "maximum": 1440,
            "example": 540
          },
          "durations": {
            "description": "An array of booking durations created by this booking.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookingDuration"
            }
          },
          "details": {
            "type": "string",
            "maxLength": 65535,
            "description": "Extra details for the booking."
          },
          "notes": {
            "type": "string",
            "maxLength": 65535,
            "description": "Extra details for the booking. This will be removed in future versions. Use the `details` field instead.",
            "deprecated": true
          },
          "billable": {
            "description": "If `true`, then the booking is billable.",
            "type": "boolean"
          },
          "project_id": {
            "nullable": true,
            "description": "Unique identifier of the Project this Booking is for. (Can be `null`)",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "client_id": {
            "nullable": true,
            "description": "Unique identifier of the Client this Booking is for. (Can be `null`)",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "refreshable": {
            "description": "If `true`, availability has changed since the booking was created. Modifying the booking might affect the total time booked.",
            "type": "boolean"
          },
          "created_at": {
            "description": "The date and time when this booking was created.",
            "example": "2020-12-31T14:29:29.000Z",
            "type": "string",
            "format": "iso-date-time-string"
          },
          "updated_at": {
            "description": "The date and time when this booking was last updated.",
            "example": "2020-12-31T14:29:29.000Z",
            "type": "string",
            "format": "iso-date-time-string"
          },
          "last_updated_by": {
            "description": "The unique identifier of the user that last updated this booking.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "rrule": {
            "$ref": "#/components/schemas/RRule"
          },
          "group_id": {
            "nullable": true,
            "description": "The ID of the group that this booking belongs to – if it is part of a sequence of repeating bookings.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "sequence_no": {
            "description": "Which event in a repeating sequence this booking belongs to",
            "nullable": true,
            "type": "integer"
          },
          "timezone": {
            "description": "Specified timezone for the booking, or null/empty string for the local resource's timezones",
            "anyOf": [
              {
                "description": "A timezone (based off of Ruby on Rails's ActiveSupport::TimeZone key mappings). See [Timezones](#section/Data-types/Timezones) for a list of valid timezones.",
                "type": "string",
                "example": "UTC"
              },
              {
                "type": "string",
                "enum": [
                  ""
                ]
              },
              {
                "type": "null"
              }
            ]
          },
          "tentative": {
            "description": "When `true` this is a tentative booking, and when `false` this is a confirmed booking. Tentative bookings do not take up availability.",
            "type": "boolean"
          }
        }
      },
      "UpsertedBooking": {
        "title": "Created/Updated Booking response",
        "description": "Response representing a booking that has been created or updated",
        "type": "object",
        "additionalProperties": false,
        "required": [],
        "properties": {
          "id": {
            "description": "The unique identifier of the booking.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "resource_id": {
            "description": "The unique identifier of the booked resource.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "resource_ids": {
            "type": "array",
            "items": {
              "description": "A unique identifier for an entity.",
              "type": "integer",
              "minimum": 1,
              "example": 1
            },
            "minItems": 1
          },
          "booker": {
            "description": "The user who created the booking.",
            "type": "object",
            "additionalProperties": false,
            "required": [
              "id",
              "name",
              "email",
              "color"
            ],
            "properties": {
              "id": {
                "description": "The unique identifier of the user who booked the resource.",
                "type": "integer",
                "minimum": 1,
                "example": 1
              },
              "email": {
                "type": "string",
                "maxLength": 255,
                "example": "email@resourceguruapp.com",
                "description": "The email address of the booker."
              },
              "name": {
                "type": "string",
                "maxLength": 255,
                "description": "The name of the booker.",
                "example": "Joe Bloggs"
              },
              "color": {
                "description": "The color used to highlight this booker.",
                "type": "string",
                "pattern": "^#[a-fA-F0-9]{6}$",
                "example": "#c0ffee"
              }
            }
          },
          "start_date": {
            "description": "First date of the booking.",
            "example": "2020-12-31",
            "type": "string",
            "format": "iso-date-string"
          },
          "end_date": {
            "description": "Last date of the booking.",
            "example": "2020-12-31",
            "type": "string",
            "format": "iso-date-string"
          },
          "duration": {
            "type": "integer",
            "minimum": 1,
            "maximum": 1440,
            "description": "The length of each booking in minutes",
            "example": 60
          },
          "start_time": {
            "description": "A time represented by the number of minutes elapsed since midnight",
            "nullable": true,
            "type": "integer",
            "minimum": 0,
            "maximum": 1440,
            "example": 540
          },
          "durations": {
            "description": "An array of booking durations created by this booking.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookingDuration"
            }
          },
          "details": {
            "type": "string",
            "maxLength": 65535,
            "description": "Extra details for the booking."
          },
          "notes": {
            "type": "string",
            "maxLength": 65535,
            "description": "Extra details for the booking. This will be removed in future versions. Use the `details` field instead.",
            "deprecated": true
          },
          "billable": {
            "description": "If `true`, then the booking is billable.",
            "type": "boolean"
          },
          "project_id": {
            "nullable": true,
            "description": "Unique identifier of the Project this Booking is for. (Can be `null`)",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "client_id": {
            "nullable": true,
            "description": "Unique identifier of the Client this Booking is for. (Can be `null`)",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "refreshable": {
            "description": "If `true`, availability has changed since the booking was created. Modifying the booking might affect the total time booked.",
            "type": "boolean"
          },
          "created_at": {
            "description": "The date and time when this booking was created.",
            "example": "2020-12-31T14:29:29.000Z",
            "type": "string",
            "format": "iso-date-time-string"
          },
          "updated_at": {
            "description": "The date and time when this booking was last updated.",
            "example": "2020-12-31T14:29:29.000Z",
            "type": "string",
            "format": "iso-date-time-string"
          },
          "last_updated_by": {
            "description": "The unique identifier of the user that last updated this booking.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "rrule": {
            "$ref": "#/components/schemas/RRule"
          },
          "group_id": {
            "nullable": true,
            "description": "The ID of the group that this booking belongs to – if it is part of a sequence of repeating bookings.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "removed_availability_dates": {
            "type": "object",
            "x-patternProperties": {
              "[0-9]+": {
                "type": "array",
                "items": {
                  "description": "An object containing an array of dates for each resource that has some availability removed, optionally returned when creating booking",
                  "example": "2020-12-31",
                  "type": "string",
                  "format": "iso-date-string"
                }
              }
            },
            "additionalProperties": {
              "type": "array",
              "items": {
                "description": "An object containing an array of dates for each resource that has some availability removed, optionally returned when creating booking",
                "example": "2020-12-31",
                "type": "string",
                "format": "iso-date-string"
              }
            }
          },
          "sequence_no": {
            "description": "Which event in a repeating sequence this booking belongs to",
            "nullable": true,
            "type": "integer"
          },
          "timezone": {
            "description": "Specified timezone for the booking, or null/empty string for the local resource's timezones",
            "anyOf": [
              {
                "description": "A timezone (based off of Ruby on Rails's ActiveSupport::TimeZone key mappings). See [Timezones](#section/Data-types/Timezones) for a list of valid timezones.",
                "type": "string",
                "example": "UTC"
              },
              {
                "type": "string",
                "enum": [
                  ""
                ]
              },
              {
                "type": "null"
              }
            ]
          },
          "tentative": {
            "description": "When `true` this is a tentative booking, and when `false` this is a confirmed booking. Tentative bookings do not take up availability.",
            "type": "boolean"
          }
        }
      },
      "BookingClashResponse": {
        "title": "Booking clash response",
        "description": "A response object returned when creating or updating a booking would conflict with other bookings.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "waiting_dates",
          "clashing_dates",
          "can_add_with_overtime",
          "resource_id",
          "resource_ids",
          "non_working_date_clashes"
        ],
        "properties": {
          "waiting_dates": {
            "description": "A list of dates indicating days that would have been added to the waiting list.",
            "type": "array",
            "items": {
              "description": "An ISO 8601 date",
              "example": "2020-12-31",
              "type": "string",
              "format": "iso-date-string"
            }
          },
          "clashing_dates": {
            "description": "A list of dates from this booking that conflict with other bookings.",
            "type": "array",
            "items": {
              "description": "An ISO 8601 date",
              "example": "2020-12-31",
              "type": "string",
              "format": "iso-date-string"
            }
          },
          "can_add_with_overtime": {
            "description": "Whether this booking can be added with elastic overtime.",
            "type": "boolean"
          },
          "resource_id": {
            "description": "The unique id of the resource this booking will be made for.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "resource_ids": {
            "description": "The resource instance ids that have clashes",
            "type": "array",
            "items": {
              "description": "A unique identifier for an entity.",
              "type": "integer",
              "minimum": 1,
              "example": 1
            }
          },
          "non_working_date_clashes": {
            "type": "array",
            "items": {
              "description": "Non-working dates from this booking that conflict with other bookings",
              "example": "2020-12-31",
              "type": "string",
              "format": "iso-date-string"
            }
          }
        }
      },
      "BookingDuration": {
        "title": "Booking duration",
        "description": "Describes the times and durations for an individual day of a booking.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "date",
          "duration",
          "waiting",
          "elastic_overtime"
        ],
        "properties": {
          "date": {
            "description": "The date of this duration.",
            "example": "2020-12-31",
            "type": "string",
            "format": "iso-date-string"
          },
          "duration": {
            "type": "integer",
            "minimum": 1,
            "maximum": 1440,
            "description": "The length of the booking in minutes.",
            "example": 60
          },
          "start_time": {
            "description": "A time represented by the number of minutes elapsed since midnight",
            "nullable": true,
            "type": "integer",
            "minimum": 0,
            "maximum": 1440,
            "example": 540
          },
          "end_time": {
            "description": "A time represented by the number of minutes elapsed since midnight",
            "nullable": true,
            "type": "integer",
            "minimum": 0,
            "maximum": 1440,
            "example": 540
          },
          "waiting": {
            "description": "Whether this booking duration is on the waiting list or not.",
            "type": "boolean"
          },
          "elastic_overtime": {
            "description": "When the resource doesn't have enough availability, the booking can generate overtime which is represented by these periods of time.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Period"
            }
          }
        }
      },
      "Bookings": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Booking"
        }
      },
      "CapAndDeleteBookings": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "date",
          "booking_ids",
          "account_id",
          "user_id"
        ],
        "properties": {
          "account_id": {
            "$ref": "#/components/schemas/Booking/properties/id"
          },
          "user_id": {
            "$ref": "#/components/schemas/Booking/properties/id"
          },
          "date": {
            "$ref": "#/components/schemas/ISODateString"
          },
          "booking_ids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Booking/properties/id"
            }
          }
        }
      },
      "GetBookingsParameters": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "calendar": {
            "type": "string",
            "enum": [
              "0",
              "1"
            ],
            "example": "0"
          },
          "waiting": {
            "type": "string",
            "enum": [
              "0",
              "1"
            ],
            "example": "0"
          },
          "resource_ids": {
            "type": "array",
            "example": [
              "42",
              "50"
            ],
            "items": {
              "$ref": "#/components/schemas/QueryEntityId"
            }
          },
          "booker_id": {
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "me"
                ]
              },
              {
                "$ref": "#/components/schemas/QueryEntityId"
              }
            ],
            "example": "me"
          },
          "start_date": {
            "$ref": "#/components/schemas/ISODateString"
          },
          "end_date": {
            "$ref": "#/components/schemas/ISODateString"
          },
          "limit": {
            "$ref": "#/components/parameters/limit/schema"
          },
          "offset": {
            "$ref": "#/components/parameters/offset/schema"
          }
        }
      },
      "NewBooking": {
        "title": "New booking",
        "description": "A new booking request",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "start_date",
          "end_date",
          "duration"
        ],
        "properties": {
          "resource_id": {
            "description": "The unique identifier of the booked resource. **Must supply either this or `resource_ids`**",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "resource_ids": {
            "type": "array",
            "items": {
              "description": "A unique identifier for an entity.",
              "type": "integer",
              "minimum": 1,
              "example": 1
            },
            "minItems": 1,
            "description": "The unique identifier of all booked resources.  **Must supply either this or `resource_id`**"
          },
          "start_date": {
            "$ref": "#/components/schemas/Booking/properties/start_date"
          },
          "end_date": {
            "$ref": "#/components/schemas/Booking/properties/end_date"
          },
          "duration": {
            "$ref": "#/components/schemas/Booking/properties/duration"
          },
          "start_time": {
            "$ref": "#/components/schemas/Booking/properties/start_time"
          },
          "details": {
            "type": "string",
            "maxLength": 65535,
            "default": "",
            "description": "Extra details for the booking."
          },
          "booker_id": {
            "description": "The unique identifier of the user that this event is booked by, defaults to the authenticated User.",
            "type": "integer",
            "minimum": 1,
            "example": 1,
            "default": "authenticated user's unique identifier"
          },
          "billable": {
            "description": "Indicates whether this booking is billable or non-billable. If `null`, it defaults to the assigned project's billable setting, or false if no project is assigned.",
            "default": false,
            "type": "boolean"
          },
          "project_id": {
            "default": null,
            "nullable": true,
            "description": "Unique identifier of the Project this Booking is for. (Can be `null`)",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "client_id": {
            "default": null,
            "nullable": true,
            "description": "Unique identifier of the Client this Booking is for. (Can be `null`)",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "allow_waiting": {
            "description": "If set to `true`, this booking will be added to the waiting list if there is insufficient availability",
            "type": "boolean",
            "default": false
          },
          "allow_overtime": {
            "description": "If set to `true`, this booking will add additional overtime to the resource if there is insufficient availability",
            "type": "boolean",
            "default": false
          },
          "rrule": {
            "$ref": "#/components/schemas/RRule"
          },
          "timezone": {
            "description": "Specified timezone for the booking, or null/empty string for the local resource's timezones",
            "anyOf": [
              {
                "description": "A timezone (based off of Ruby on Rails's ActiveSupport::TimeZone key mappings). See [Timezones](#section/Data-types/Timezones) for a list of valid timezones.",
                "type": "string",
                "example": "UTC"
              },
              {
                "type": "string",
                "enum": [
                  ""
                ]
              },
              {
                "type": "null"
              }
            ],
            "default": null
          },
          "tentative": {
            "description": "When `true` this is a tentative booking, and when `false` this is a confirmed booking. Tentative bookings do not take up availability.",
            "type": "boolean"
          }
        }
      },
      "UpdateBooking": {
        "title": "Update booking",
        "description": "A request to update a booking",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "resource_id": {
            "$ref": "#/components/schemas/Booking/properties/resource_id"
          },
          "resource_ids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityId"
            },
            "minItems": 1
          },
          "start_date": {
            "$ref": "#/components/schemas/Booking/properties/start_date"
          },
          "end_date": {
            "$ref": "#/components/schemas/Booking/properties/end_date"
          },
          "duration": {
            "$ref": "#/components/schemas/Booking/properties/duration"
          },
          "start_time": {
            "$ref": "#/components/schemas/Booking/properties/start_time"
          },
          "details": {
            "$ref": "#/components/schemas/Booking/properties/details"
          },
          "booker_id": {
            "$ref": "#/components/schemas/Booking/properties/booker/properties/id"
          },
          "billable": {
            "$ref": "#/components/schemas/Booking/properties/billable"
          },
          "project_id": {
            "$ref": "#/components/schemas/Booking/properties/project_id"
          },
          "client_id": {
            "$ref": "#/components/schemas/Booking/properties/client_id"
          },
          "allow_waiting": {
            "description": "If set to true, this booking will be added to the waiting list if there is insufficient availability",
            "type": "boolean",
            "default": false
          },
          "allow_overtime": {
            "description": "If set to true, this booking will add additional overtime to the resource if there is insufficient availability",
            "type": "boolean",
            "default": false
          },
          "rrule": {
            "$ref": "#/components/schemas/RRule"
          },
          "timezone": {
            "description": "Specified timezone for the booking, or null/empty string for the local resource's timezones",
            "anyOf": [
              {
                "description": "A timezone (based off of Ruby on Rails's ActiveSupport::TimeZone key mappings). See [Timezones](#section/Data-types/Timezones) for a list of valid timezones.",
                "type": "string",
                "example": "UTC"
              },
              {
                "type": "string",
                "enum": [
                  ""
                ]
              },
              {
                "type": "null"
              }
            ],
            "default": null
          },
          "tentative": {
            "description": "When `true` this is a tentative booking, and when `false` this is a confirmed booking. Tentative bookings do not take up availability.",
            "type": "boolean"
          }
        }
      },
      "RepeatBookingScope": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "bookingId"
        ],
        "properties": {
          "bookingId": {
            "$ref": "#/components/schemas/QueryEntityId"
          },
          "affects": {
            "$ref": "#/components/schemas/Affects"
          }
        }
      },
      "RRule": {
        "title": "Recurrence rule",
        "description": "A recurrence rule defines a rule or repeating pattern for recurring events",
        "oneOf": [
          {
            "title": "Weekly Recurrence",
            "description": "Specifies repeating events based on an interval of a week or more",
            "type": "object",
            "required": [
              "weekly"
            ],
            "additionalProperties": false,
            "properties": {
              "weekly": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "interval",
                  "weekday",
                  "ends"
                ],
                "properties": {
                  "interval": {
                    "$ref": "#/components/schemas/RRuleInterval"
                  },
                  "weekday": {
                    "$ref": "#/components/schemas/WeekDay"
                  },
                  "ends": {
                    "$ref": "#/components/schemas/RRuleEnds"
                  }
                }
              }
            }
          },
          {
            "title": "Monthly Recurrence",
            "description": "Specifies repeating events based on an interval of a month or more",
            "type": "object",
            "required": [
              "monthly"
            ],
            "additionalProperties": false,
            "properties": {
              "monthly": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "interval",
                  "day_selection",
                  "ends"
                ],
                "properties": {
                  "interval": {
                    "$ref": "#/components/schemas/RRuleInterval"
                  },
                  "day_selection": {
                    "description": "Specifies which week and weekday of the month this booking will repeat",
                    "type": "object",
                    "required": [
                      "type",
                      "week",
                      "weekday"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "onWeekDay"
                        ]
                      },
                      "week": {
                        "description": "The nth week of the month, where 1 is first and -1 is last",
                        "type": "integer",
                        "enum": [
                          1,
                          2,
                          3,
                          4,
                          -1
                        ]
                      },
                      "weekday": {
                        "$ref": "#/components/schemas/WeekDay"
                      }
                    }
                  },
                  "ends": {
                    "$ref": "#/components/schemas/RRuleEnds"
                  }
                }
              }
            }
          },
          {
            "title": "Yearly Recurrence",
            "description": "Specifies repeating events based on an interval of a year or more",
            "type": "object",
            "required": [
              "yearly"
            ],
            "additionalProperties": false,
            "properties": {
              "yearly": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "interval",
                  "day_selection",
                  "ends"
                ],
                "properties": {
                  "interval": {
                    "$ref": "#/components/schemas/RRuleInterval"
                  },
                  "day_selection": {
                    "description": "Specifies which week and weekday of the month this booking will repeat",
                    "type": "object",
                    "required": [
                      "type",
                      "month",
                      "week",
                      "weekday"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "onWeekDayOfMonth"
                        ]
                      },
                      "month": {
                        "description": "The month of the year, where 1 is January and 12 is December",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 12
                      },
                      "week": {
                        "description": "The nth week of the month, where 1 is first and -1 is last",
                        "type": "integer",
                        "enum": [
                          1,
                          2,
                          3,
                          4,
                          -1
                        ]
                      },
                      "weekday": {
                        "$ref": "#/components/schemas/WeekDay"
                      }
                    }
                  },
                  "ends": {
                    "$ref": "#/components/schemas/RRuleEnds"
                  }
                }
              }
            }
          }
        ],
        "nullable": true
      },
      "RRuleEnds": {
        "description": "Defines the ending of the recurrence",
        "oneOf": [
          {
            "title": "Count",
            "description": "Defines the number of occurrences at which to range-bound the recurrence. The count includes the original booking.",
            "type": "object",
            "additionalProperties": false,
            "required": [
              "type",
              "count"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "count"
                ]
              },
              "count": {
                "type": "integer",
                "minimum": 1,
                "description": "The number of repeating occurrences of the booking."
              }
            }
          },
          {
            "title": "Date",
            "description": "Defines a date that bounds the recurrence rule in an inclusive manner",
            "type": "object",
            "additionalProperties": false,
            "required": [
              "type",
              "date"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "date"
                ]
              },
              "date": {
                "$ref": "#/components/schemas/ISODateString"
              }
            }
          }
        ]
      },
      "RRuleInterval": {
        "description": "Represents the interval the recurrence rule repeats.",
        "type": "integer",
        "minimum": 1
      },
      "SplitBooking": {
        "title": "Split event",
        "description": "Request representing a date to split a booking with",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "date"
        ],
        "properties": {
          "date": {
            "description": "The date to split the booking on. The second half of the split will begin on this date.",
            "example": "2020-12-31",
            "type": "string",
            "format": "iso-date-string"
          }
        }
      },
      "RemoveBooking": {
        "title": "Delete event",
        "description": "Optional parameters to delete a single day on a booking",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "date": {
            "description": "The date to delete",
            "example": "2020-12-31",
            "type": "string",
            "format": "iso-date-string"
          },
          "remove_for_all": {
            "description": "Delete the date for all resources on the booking",
            "type": "boolean"
          }
        }
      },
      "Client": {
        "title": "Single client response",
        "description": "Response representing a client.",
        "type": "object",
        "additionalProperties": false,
        "required": [],
        "properties": {
          "id": {
            "description": "The unique identifier of the client.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "archived": {
            "description": "If `true`, then this Client is archived.",
            "type": "boolean"
          },
          "color": {
            "nullable": true,
            "$ref": "#/components/schemas/Color"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "The client name."
          },
          "notes": {
            "nullable": true,
            "type": "string",
            "maxLength": 65535,
            "description": "Notes on the client."
          },
          "url": {
            "description": "The URL to view this client in the API.",
            "type": "string",
            "example": "https://api.resourceguruapp.com/v1/clients/1"
          },
          "creator_id": {
            "description": "The unique identifier of the user this client was created by.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "created_at": {
            "description": "The date and time when this client was created.",
            "example": "2020-12-31T14:29:29.000Z",
            "type": "string",
            "format": "iso-date-time-string"
          },
          "updated_at": {
            "description": "The date and time when this client was last updated.",
            "example": "2020-12-31T14:29:29.000Z",
            "type": "string",
            "format": "iso-date-time-string"
          },
          "last_updated_by": {
            "description": "The unique identifier of the user that last updated this client.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "deleted": {
            "description": "If `true`, then this client is deleted.",
            "type": "boolean"
          },
          "deleted_at": {
            "nullable": true,
            "description": "the date and time when this client was deleted (if deleted is `true`).",
            "example": "2020-12-31",
            "type": "string",
            "format": "iso-date-string"
          }
        }
      },
      "Clients": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Client"
        }
      },
      "NewClient": {
        "title": "Create client payload",
        "description": "Properties to create a client",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "color": {
            "$ref": "#/components/schemas/ColorInput"
          },
          "name": {
            "$ref": "#/components/schemas/Client/properties/name"
          },
          "notes": {
            "$ref": "#/components/schemas/Client/properties/notes"
          },
          "archived": {
            "type": "boolean",
            "description": "If `true`, marks the client as archived.",
            "default": false
          }
        }
      },
      "UpdateClient": {
        "title": "Update client payload",
        "description": "Properties to update a client",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "color": {
            "$ref": "#/components/schemas/ColorInput"
          },
          "name": {
            "$ref": "#/components/schemas/Client/properties/name"
          },
          "notes": {
            "$ref": "#/components/schemas/Client/properties/notes"
          },
          "archived": {
            "type": "boolean",
            "description": "Omit to make no change. If `true`, marks the client as archived. If `false`, marks the client as unarchived."
          }
        }
      },
      "CustomAvailablePeriod": {
        "title": "A custom availability period for a resource",
        "description": "A record representing an alteration to the normal availability of a resource on a specific day.  Note that there can be multiple period of availability on a single day",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "resource_instance_id",
          "creator_id",
          "date",
          "start_time",
          "end_time",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "The unique identifier of this custom availability period",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "resource_instance_id": {
            "description": "The unique identifier of the resource this custom availability period is for",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "creator_id": {
            "description": "The unique identifier of the user who created this record",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "date": {
            "description": "The date that this custom availability period applies to",
            "example": "2020-12-31",
            "type": "string",
            "format": "iso-date-string"
          },
          "start_time": {
            "description": "The start of availability",
            "type": "integer",
            "minimum": 0,
            "maximum": 1440,
            "example": 540
          },
          "end_time": {
            "description": "The duration of overtime",
            "type": "integer",
            "minimum": 0,
            "maximum": 1440,
            "example": 540
          },
          "created_at": {
            "$ref": "#/components/schemas/ISODateTimeString"
          },
          "updated_at": {
            "$ref": "#/components/schemas/ISODateTimeString"
          }
        }
      },
      "CustomAvailablePeriodClashResponse": {
        "title": "Custom available period clash response",
        "description": "A response object returned when creating a custom available period would conflict with existing bookings",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "clashes"
        ],
        "properties": {
          "clashes": {
            "description": "An array of booking dates that clash with the downtime",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "id",
                "repeat_booking_id",
                "date"
              ],
              "properties": {
                "id": {
                  "description": "The unique identifier of the booking date",
                  "type": "integer",
                  "minimum": 1,
                  "example": 1
                },
                "repeat_booking_id": {
                  "description": "The unique identifier of the booking that this booking date belongs to",
                  "type": "integer",
                  "minimum": 1,
                  "example": 1
                },
                "date": {
                  "$ref": "#/components/schemas/ISODateString"
                }
              }
            }
          }
        }
      },
      "CustomAvailablePeriodClashes": {
        "title": "Custom available period clashes request body",
        "description": "A partial custom available period, used to locate clashing bookings",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "custom_available_periods"
        ],
        "properties": {
          "custom_available_periods": {
            "$ref": "#/components/schemas/NewCustomAvailablePeriod/properties/custom_available_periods"
          }
        }
      },
      "CustomAvailablePeriodReset": {
        "title": "Reset custom availability periods",
        "description": "An object containing the dates we want to reset and the update strategy for existing bookings",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "resource_instance_id",
          "dates"
        ],
        "properties": {
          "resource_instance_id": {
            "$ref": "#/components/schemas/CustomAvailablePeriod/properties/resource_instance_id"
          },
          "dates": {
            "description": "The dates that we want to remove custom availability for",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISODateString"
            }
          },
          "allow_waiting": {
            "type": "boolean",
            "description": "Whether we should move any bookings that no longer fit the resource due to the change to availability to the waiting list",
            "default": false
          },
          "delete_invalid_bookings": {
            "type": "boolean",
            "description": "Whether we should delete any bookings that no longer fit the resource due to the change to availability",
            "default": false
          }
        }
      },
      "NewCustomAvailablePeriod": {
        "title": "New custom availability periods",
        "description": "An object containing the custom availability periods and the update strategy for existing bookings",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "custom_available_periods"
        ],
        "properties": {
          "custom_available_periods": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "resource_instance_id",
              "start_date",
              "end_date",
              "days"
            ],
            "properties": {
              "resource_instance_id": {
                "$ref": "#/components/schemas/CustomAvailablePeriod/properties/resource_instance_id"
              },
              "start_date": {
                "description": "The start date we want this custom availability to apply to",
                "example": "2020-12-31",
                "type": "string",
                "format": "iso-date-string"
              },
              "end_date": {
                "description": "The end date we want this custom availability to apply to",
                "example": "2020-12-31",
                "type": "string",
                "format": "iso-date-string"
              },
              "days": {
                "type": "object",
                "additionalProperties": false,
                "description": "The availability for weekdays between the start_date and end_date",
                "properties": {
                  "0": {
                    "$ref": "#/components/schemas/NewCustomAvailablePeriodDay"
                  },
                  "1": {
                    "$ref": "#/components/schemas/NewCustomAvailablePeriodDay"
                  },
                  "2": {
                    "$ref": "#/components/schemas/NewCustomAvailablePeriodDay"
                  },
                  "3": {
                    "$ref": "#/components/schemas/NewCustomAvailablePeriodDay"
                  },
                  "4": {
                    "$ref": "#/components/schemas/NewCustomAvailablePeriodDay"
                  },
                  "5": {
                    "$ref": "#/components/schemas/NewCustomAvailablePeriodDay"
                  },
                  "6": {
                    "$ref": "#/components/schemas/NewCustomAvailablePeriodDay"
                  }
                },
                "example": {
                  "1": {
                    "time_blocks": [
                      {
                        "start_time": 540,
                        "end_time": 780
                      },
                      {
                        "start_time": 840,
                        "end_time": 1020
                      }
                    ]
                  }
                }
              }
            }
          },
          "allow_waiting": {
            "type": "boolean",
            "description": "Whether we should move any bookings that no longer fit the resource due to the change to availability to the waiting list",
            "default": false
          },
          "delete_invalid_bookings": {
            "type": "boolean",
            "description": "Whether we should delete any bookings that no longer fit the resource due to the change to availability",
            "default": false
          }
        }
      },
      "NewCustomAvailablePeriodDay": {
        "type": "object",
        "description": "Declares the blocks of time that the resource will be available on this weekday",
        "additionalProperties": false,
        "required": [
          "time_blocks"
        ],
        "properties": {
          "time_blocks": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "start_time",
                "end_time"
              ],
              "properties": {
                "start_time": {
                  "description": "The start time of this availability time block",
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 1440,
                  "example": 540
                },
                "end_time": {
                  "description": "The end time of this availability time block",
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 1440,
                  "example": 540
                }
              }
            }
          }
        }
      },
      "Downtime": {
        "title": "downtime event",
        "description": "A downtime event.",
        "type": "object",
        "additionalProperties": false,
        "required": [],
        "properties": {
          "id": {
            "description": "The unique identifier for this downtime event.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "details": {
            "type": "string",
            "maxLength": 65535,
            "description": "Extra details about this downtime event."
          },
          "from": {
            "description": "The start date for the downtime event.",
            "example": "2020-12-31",
            "type": "string",
            "format": "iso-date-string"
          },
          "to": {
            "description": "End date for the downtime event.",
            "example": "2020-12-31",
            "type": "string",
            "format": "iso-date-string"
          },
          "start_time": {
            "description": "The start time of the downtime event represented by the number of minutes since midnight.",
            "type": "integer",
            "minimum": 0,
            "maximum": 1440,
            "example": 540
          },
          "end_time": {
            "description": "The end time of the downtime event represented by the number of minutes since midnight.",
            "type": "integer",
            "minimum": 0,
            "maximum": 1440,
            "example": 600
          },
          "timezone": {
            "description": "Specified timezone for the downtime event, or null for the assigned resources' local timezone.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/Timezone"
              },
              {
                "type": "null"
              }
            ]
          },
          "downtime_type_id": {
            "nullable": true,
            "description": "The unique identifier of the downtime type of this downtime event.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "booker_id": {
            "description": "The unique identifier of the user who booked this downtime event.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "creator_id": {
            "description": "The unique identifier of the user who booked this downtime event.\nDeprecated: use `booker_id`.",
            "type": "integer",
            "minimum": 1,
            "example": 1,
            "deprecated": true
          },
          "resource_ids": {
            "description": "Unique identifiers of the resources this downtime event is booked for.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityId"
            },
            "minItems": 1
          },
          "account_id": {
            "description": "The unique identifier of the account that this downtime event belongs to.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "created_at": {
            "description": "The date that this downtime event was created.",
            "example": "2020-12-31T14:29:29.000Z",
            "type": "string",
            "format": "iso-date-time-string"
          },
          "updated_at": {
            "description": "Last updated date and time.",
            "example": "2020-12-31T14:29:29.000Z",
            "type": "string",
            "format": "iso-date-time-string"
          },
          "last_updated_by": {
            "nullable": true,
            "description": "The unique identifier of the user that last updated this downtime.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "leave": {
            "nullable": true,
            "type": "string",
            "maxLength": 255,
            "deprecated": true
          },
          "state": {
            "deprecated": true,
            "type": "string"
          },
          "deleted": {
            "description": "If `true`, this downtime event has been deleted.",
            "type": "boolean",
            "example": false,
            "deprecated": true
          }
        }
      },
      "DowntimeClashResponse": {
        "title": "Availability clash response",
        "description": "A response object returned when changing availability would result in clashing bookings",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "clashes"
        ],
        "properties": {
          "clashes": {
            "description": "An array of booking durations that clash",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "id",
                "repeat_booking_id",
                "date"
              ],
              "properties": {
                "id": {
                  "description": "The unique identifier of the booking duration",
                  "type": "integer",
                  "minimum": 1,
                  "example": 1
                },
                "repeat_booking_id": {
                  "description": "The unique identifier of the booking that this booking duration belongs to",
                  "type": "integer",
                  "minimum": 1,
                  "example": 1
                },
                "date": {
                  "$ref": "#/components/schemas/ISODateString"
                },
                "resource_id": {
                  "description": "The resource id associated with the booking",
                  "type": "integer",
                  "minimum": 1,
                  "example": 1
                }
              }
            }
          }
        }
      },
      "DowntimeClashes": {
        "title": "Downtime clashes request body",
        "description": "A partial downtime event, used to locate clashing bookings",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "resource_ids",
          "from",
          "to",
          "start_time",
          "end_time"
        ],
        "properties": {
          "from": {
            "$ref": "#/components/schemas/Downtime/properties/from"
          },
          "to": {
            "$ref": "#/components/schemas/Downtime/properties/to"
          },
          "start_time": {
            "$ref": "#/components/schemas/Downtime/properties/start_time"
          },
          "end_time": {
            "$ref": "#/components/schemas/Downtime/properties/end_time"
          },
          "resource_ids": {
            "$ref": "#/components/schemas/Downtime/properties/resource_ids"
          },
          "timezone": {
            "description": "Specified timezone for the downtime event, or null for the assigned resources' local timezone.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/Timezone"
              },
              {
                "type": "null"
              }
            ],
            "default": null
          }
        }
      },
      "Downtimes": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Downtime"
        }
      },
      "NewDowntime": {
        "title": "New downtime event",
        "description": "A new downtime event.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "resource_ids",
          "from",
          "to",
          "start_time",
          "end_time"
        ],
        "properties": {
          "delete_invalid_bookings": {
            "description": "If `true`, any bookings that clash with the downtime will be deleted.",
            "type": "boolean",
            "default": false
          },
          "block_by_clashes": {
            "description": "If `true`, the operation will fail and the server will respond 400 if any bookings clash with the downtime. If `false`, clashing bookings will move to the waiting list. Set `delete_invalid_bookings: true` to delete clashes.",
            "type": "boolean",
            "default": false
          },
          "from": {
            "$ref": "#/components/schemas/Downtime/properties/from"
          },
          "to": {
            "$ref": "#/components/schemas/Downtime/properties/to"
          },
          "start_time": {
            "$ref": "#/components/schemas/Downtime/properties/start_time"
          },
          "end_time": {
            "$ref": "#/components/schemas/Downtime/properties/end_time"
          },
          "timezone": {
            "$ref": "#/components/schemas/Downtime/properties/timezone"
          },
          "downtime_type_id": {
            "$ref": "#/components/schemas/Downtime/properties/downtime_type_id"
          },
          "details": {
            "type": "string",
            "maxLength": 65535,
            "description": "Extra details about this downtime event.",
            "default": null
          },
          "booker_id": {
            "description": "The unique identifier of the user that this downtime event is booked by, defaults to the authenticated User.",
            "type": "integer",
            "minimum": 1,
            "example": 1,
            "default": "authenticated user's unique identifier"
          },
          "creator_id": {
            "description": "Deprecated: use `booker_id`. The unique identifier of the user that this downtime event is booked by, defaults to the authenticated User.",
            "type": "integer",
            "minimum": 1,
            "example": 1,
            "deprecated": true
          },
          "resource_ids": {
            "$ref": "#/components/schemas/Downtime/properties/resource_ids"
          },
          "allow_waiting": {
            "description": "If `true`, move any conflicting bookings to the waiting list. This is the default behaviour unless overridden by `block_by_clashes` or `delete_invalid_bookings`.",
            "type": "boolean",
            "default": true,
            "deprecated": true
          }
        }
      },
      "UpdateDowntime": {
        "title": "Update request for a downtime event",
        "description": "An update request for a downtime event.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "delete_invalid_bookings": {
            "description": "If `true`, any bookings that clash with the downtime will be deleted.",
            "type": "boolean",
            "default": false
          },
          "block_by_clashes": {
            "description": "If `true`, the operation will fail and the server will respond 400 if any bookings clash with the downtime. If `false`, clashing bookings will move to the waiting list. Set `delete_invalid_bookings: true` to delete clashes.",
            "type": "boolean",
            "default": false
          },
          "from": {
            "$ref": "#/components/schemas/Downtime/properties/from"
          },
          "to": {
            "$ref": "#/components/schemas/Downtime/properties/to"
          },
          "start_time": {
            "$ref": "#/components/schemas/Downtime/properties/start_time"
          },
          "end_time": {
            "$ref": "#/components/schemas/Downtime/properties/end_time"
          },
          "timezone": {
            "$ref": "#/components/schemas/Downtime/properties/timezone"
          },
          "downtime_type_id": {
            "$ref": "#/components/schemas/Downtime/properties/downtime_type_id"
          },
          "details": {
            "$ref": "#/components/schemas/Downtime/properties/details"
          },
          "booker_id": {
            "description": "The unique identifier of the user that this downtime event is booked by.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "resource_ids": {
            "$ref": "#/components/schemas/Downtime/properties/resource_ids"
          },
          "allow_waiting": {
            "description": "If `true`, move any conflicting bookings to the waiting list. This is the default behaviour unless overridden by `block_by_clashes` or `delete_invalid_bookings`.",
            "type": "boolean",
            "default": true,
            "deprecated": true
          }
        }
      },
      "GetDowntimesParameters": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "resource_ids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryEntityId"
            }
          },
          "from": {
            "$ref": "#/components/schemas/ISODateString"
          },
          "to": {
            "$ref": "#/components/schemas/ISODateString"
          },
          "limit": {
            "$ref": "#/components/parameters/limit/schema"
          },
          "offset": {
            "$ref": "#/components/parameters/offset/schema"
          }
        }
      },
      "SplitAndDeleteInactiveResourceDowntimes": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "resource_ids",
          "account_id",
          "user_id"
        ],
        "properties": {
          "account_id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "user_id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "date": {
            "$ref": "#/components/schemas/ISODateString"
          },
          "resource_ids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        }
      },
      "SplitDowntime": {
        "title": "Split downtime",
        "description": "Request representing a date to split a downtime on.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "date"
        ],
        "properties": {
          "date": {
            "description": "The date to split the downtime on. The split will occur at midnight at the start of this date.",
            "example": "2020-12-31",
            "type": "string",
            "format": "iso-date-string"
          },
          "resource_id": {
            "description": "An optional resource id to determine the date boundary to split on when timezones are involved",
            "type": "integer",
            "minimum": 1,
            "example": 1
          }
        }
      },
      "DowntimeType": {
        "title": "Downtime type",
        "description": "A downtime type",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "account_id",
          "name",
          "default",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "The unique identifier of this downtime type.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "account_id": {
            "description": "The unique identifier of the account that this downtime type belongs to.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "The name of this downtime type.",
            "example": "Public holiday"
          },
          "default": {
            "description": "Whether this downtime type is one provided by default by ResourceGuru.",
            "type": "boolean"
          },
          "created_at": {
            "description": "The date and time when this downtime type was created.",
            "example": "2020-12-31T14:29:29.000Z",
            "type": "string",
            "format": "iso-date-time-string"
          },
          "updated_at": {
            "description": "The date and time when this downtime type was last updated.",
            "example": "2020-12-31T14:29:29.000Z",
            "type": "string",
            "format": "iso-date-time-string"
          }
        }
      },
      "DowntimeTypes": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DowntimeType"
        }
      },
      "NewOvertime": {
        "title": "New overtime record",
        "description": "A new overtime record",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "resource_id",
          "date",
          "duration"
        ],
        "properties": {
          "resource_id": {
            "$ref": "#/components/schemas/Overtime/properties/resource_instance_id"
          },
          "date": {
            "$ref": "#/components/schemas/Overtime/properties/date"
          },
          "duration": {
            "$ref": "#/components/schemas/Overtime/properties/duration"
          }
        }
      },
      "Overtime": {
        "title": "A resources overtime",
        "description": "A record representing the amount of overtime for a resource on a date",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "resource_instance_id",
          "date",
          "duration",
          "creator_id",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "Overtime record unique identifier",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "resource_instance_id": {
            "description": "The unique identifier of the resource this overtime record is for",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "date": {
            "description": "The date that this overtime is recorded for",
            "example": "2020-12-31",
            "type": "string",
            "format": "iso-date-string"
          },
          "duration": {
            "type": "integer",
            "minimum": 1,
            "maximum": 1440,
            "description": "The duration of overtime",
            "example": 60
          },
          "creator_id": {
            "description": "The unique identifier of the user who created this record",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "created_at": {
            "description": "The date and time when this overtime record was created.",
            "example": "2020-12-31T14:29:29.000Z",
            "type": "string",
            "format": "iso-date-time-string"
          },
          "updated_at": {
            "description": "The date and time when this overtime record was last updated.",
            "example": "2020-12-31T14:29:29.000Z",
            "type": "string",
            "format": "iso-date-time-string"
          }
        }
      },
      "Project": {
        "title": "Project details response",
        "description": "Response representing a project and its associated entities",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "account",
          "archived",
          "default_billable",
          "name",
          "project_code",
          "notes",
          "creator_id",
          "created_at",
          "updated_at",
          "last_updated_by",
          "url"
        ],
        "properties": {
          "id": {
            "description": "Project unique identifier",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "account_id": {
            "$ref": "#/components/schemas/Account/properties/id",
            "x-comment": "Returned by create but not by get"
          },
          "account": {
            "description": "The account this project belongs to",
            "type": "object",
            "additionalProperties": false,
            "required": [
              "id",
              "name",
              "url"
            ],
            "properties": {
              "id": {
                "$ref": "#/components/schemas/Account/properties/id"
              },
              "name": {
                "$ref": "#/components/schemas/Account/properties/name"
              },
              "url": {
                "description": "An absolute or relative url",
                "type": "string",
                "example": "https://api.resourceguruapp.com/v1/example-corp/accounts/1"
              }
            }
          },
          "client_id": {
            "x-comment": "Returned by create but not by get",
            "nullable": true,
            "$ref": "#/components/schemas/Client/properties/id"
          },
          "client": {
            "description": "The client this project belongs to",
            "nullable": true,
            "type": "object",
            "additionalProperties": false,
            "required": [
              "id",
              "name",
              "notes",
              "url"
            ],
            "properties": {
              "id": {
                "$ref": "#/components/schemas/Client/properties/id"
              },
              "name": {
                "$ref": "#/components/schemas/Client/properties/name"
              },
              "notes": {
                "$ref": "#/components/schemas/Client/properties/notes"
              },
              "url": {
                "description": "An absolute or relative url",
                "type": "string",
                "example": "https://api.resourceguruapp.com/v1/example-corp/clients/1"
              }
            }
          },
          "archived": {
            "description": "If `true`, then this project is archived.",
            "type": "boolean"
          },
          "default_billable": {
            "description": "If `true` then bookings for this project will default to billable. Otherwise bookings will default to non-billable.",
            "type": "boolean"
          },
          "color": {
            "description": "The color used to highlight this project.",
            "nullable": true,
            "$ref": "#/components/schemas/Color"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "The project name."
          },
          "project_code": {
            "type": "string",
            "maxLength": 255,
            "description": "The project code.",
            "example": "WX13"
          },
          "notes": {
            "type": "string",
            "maxLength": 65535,
            "description": "Notes on the project."
          },
          "url": {
            "description": "The URL to view this project in the API.",
            "type": "string",
            "example": "https://api.resourceguruapp.com/v1/example-corp/projects/1"
          },
          "creator_id": {
            "description": "The unique identifier of the user this project was created by.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "created_at": {
            "description": "The date and time this project was created at.",
            "example": "2020-12-31T14:29:29.000Z",
            "type": "string",
            "format": "iso-date-time-string"
          },
          "updated_at": {
            "description": "The date and time this project was last updated (or created at).",
            "example": "2020-12-31T14:29:29.000Z",
            "type": "string",
            "format": "iso-date-time-string"
          },
          "last_updated_by": {
            "nullable": true,
            "description": "The unique identifier of the user that last updated this project.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "deleted": {
            "description": "Whether this project is deleted or not.",
            "type": "boolean"
          },
          "deleted_at": {
            "nullable": true,
            "description": "the date and time this project was deleted at (if deleted is true).",
            "example": "2020-12-31",
            "type": "string",
            "format": "iso-date-string"
          }
        }
      },
      "ProjectSummary": {
        "title": "Project summary response",
        "description": "Response summarising a project",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "account_id",
          "client_id",
          "archived",
          "default_billable",
          "color",
          "name",
          "project_code",
          "notes",
          "creator_id",
          "created_at",
          "updated_at",
          "last_updated_by",
          "deleted",
          "deleted_at"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Project/properties/id"
          },
          "account_id": {
            "$ref": "#/components/schemas/Account/properties/id"
          },
          "client_id": {
            "$ref": "#/components/schemas/Client/properties/id"
          },
          "archived": {
            "$ref": "#/components/schemas/Project/properties/archived"
          },
          "default_billable": {
            "$ref": "#/components/schemas/Project/properties/default_billable"
          },
          "color": {
            "$ref": "#/components/schemas/Project/properties/color"
          },
          "name": {
            "$ref": "#/components/schemas/Project/properties/name"
          },
          "project_code": {
            "$ref": "#/components/schemas/Project/properties/project_code"
          },
          "notes": {
            "$ref": "#/components/schemas/Project/properties/notes"
          },
          "url": {
            "$ref": "#/components/schemas/Project/properties/url"
          },
          "creator_id": {
            "$ref": "#/components/schemas/Project/properties/creator_id"
          },
          "created_at": {
            "$ref": "#/components/schemas/Project/properties/created_at"
          },
          "updated_at": {
            "$ref": "#/components/schemas/Project/properties/updated_at"
          },
          "last_updated_by": {
            "$ref": "#/components/schemas/Project/properties/last_updated_by"
          },
          "deleted": {
            "description": "Whether this project is deleted or not",
            "type": "boolean"
          },
          "deleted_at": {
            "description": "the date and time this project was deleted at (if deleted is true)",
            "nullable": true,
            "$ref": "#/components/schemas/ISODateTimeString"
          }
        }
      },
      "ProjectSummaries": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ProjectSummary"
        }
      },
      "NewProject": {
        "title": "Create project payload",
        "description": "Properties to create a project",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "color": {
            "$ref": "#/components/schemas/ColorInput"
          },
          "name": {
            "$ref": "#/components/schemas/Project/properties/name"
          },
          "project_code": {
            "$ref": "#/components/schemas/Project/properties/project_code"
          },
          "client_id": {
            "$ref": "#/components/schemas/Project/properties/client_id"
          },
          "notes": {
            "$ref": "#/components/schemas/Project/properties/notes"
          },
          "default_billable": {
            "$ref": "#/components/schemas/Project/properties/default_billable"
          },
          "archived": {
            "type": "boolean",
            "description": "If `true`, marks the project as archived.",
            "default": false
          }
        }
      },
      "UpdateProject": {
        "title": "Update project payload",
        "description": "Properties to update a project",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "color": {
            "$ref": "#/components/schemas/ColorInput"
          },
          "name": {
            "$ref": "#/components/schemas/Project/properties/name"
          },
          "project_code": {
            "$ref": "#/components/schemas/Project/properties/project_code"
          },
          "client_id": {
            "$ref": "#/components/schemas/Project/properties/client_id"
          },
          "notes": {
            "$ref": "#/components/schemas/Project/properties/notes"
          },
          "default_billable": {
            "$ref": "#/components/schemas/Project/properties/default_billable"
          },
          "archived": {
            "type": "boolean",
            "description": "Omit to make no change. If `true`, marks the project as archived. If `false`, marks the project as unarchived."
          }
        }
      },
      "ClientReportV1": {
        "title": "Client report",
        "description": "A report on a single client",
        "type": "object",
        "additionalProperties": false,
        "required": [],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Client/properties/id"
          },
          "booked": {
            "description": "The total number of booked minutes for this client in the report time range",
            "type": "integer",
            "example": 120
          },
          "color": {
            "$ref": "#/components/schemas/Client/properties/color"
          },
          "name": {
            "$ref": "#/components/schemas/Client/properties/name"
          },
          "notes": {
            "$ref": "#/components/schemas/Client/properties/notes"
          },
          "resources": {
            "description": "A break-down for each resource that fits in the report scope",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "booked",
                "earliest_available_period",
                "id",
                "image",
                "job_title",
                "name",
                "resource_type",
                "url",
                "utilization",
                "waiting_list"
              ],
              "properties": {
                "id": {
                  "$ref": "#/components/schemas/Resource/properties/id"
                },
                "name": {
                  "$ref": "#/components/schemas/Resource/properties/name"
                },
                "resource_type": {
                  "$ref": "#/components/schemas/ResourceType/properties/name"
                },
                "url": {
                  "$ref": "#/components/schemas/Resource/properties/url"
                },
                "job_title": {
                  "$ref": "#/components/schemas/Resource/properties/job_title"
                },
                "image": {
                  "$ref": "#/components/schemas/Resource/properties/image"
                },
                "booked": {
                  "description": "The number of booked minutes against for this resource in the report scope",
                  "type": "integer",
                  "example": 480
                },
                "waiting_list": {
                  "description": "The number of minutes for bookings on the waiting list for this resource in the report scope",
                  "type": "integer",
                  "example": 120
                },
                "utilization": {
                  "description": "The utilization of this resource in the report scope - 0 means no utilization, 1 means full utilization",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "example": 0.8
                },
                "earliest_available_period": {
                  "description": "A description of this resources next availability in the report time range",
                  "type": "string"
                }
              }
            }
          },
          "url": {
            "$ref": "#/components/schemas/Client/properties/url"
          },
          "waiting_list": {
            "description": "The total number of minutes for bookings currently on the waiting list for this client in the report time range",
            "type": "integer"
          }
        }
      },
      "ClientReportV2": {
        "title": "Client report",
        "description": "A report on a single client for a specified time range",
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportClientBreakdown"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "resources"
            ],
            "properties": {
              "resources": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReportResourceBreakdown"
                }
              }
            }
          }
        ]
      },
      "ClientsReportV1": {
        "title": "Clients report",
        "description": "A report on clients for a specified time range",
        "type": "object",
        "additionalProperties": false,
        "required": [],
        "properties": {
          "booked": {
            "description": "The total number of booked minutes across all clients in the report time range",
            "type": "integer",
            "example": 120
          },
          "max_usage": {
            "description": "The number of booked minutes for the client with the highest number of booked minutes",
            "type": "integer",
            "example": 480
          },
          "clients": {
            "description": "A break-down of allocation for each client that fits in the report range",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "booked",
                "color",
                "id",
                "name",
                "waiting_list"
              ],
              "properties": {
                "id": {
                  "oneOf": [
                    {
                      "description": "An id of 0 indicates this is representative of bookings not allocated to a client",
                      "type": "integer",
                      "enum": [
                        0
                      ]
                    },
                    {
                      "$ref": "#/components/schemas/Client/properties/id"
                    }
                  ]
                },
                "name": {
                  "$ref": "#/components/schemas/Client/properties/name"
                },
                "booked": {
                  "description": "The total number of booked minutes for this client in the report time range",
                  "type": "integer",
                  "example": 120
                },
                "color": {
                  "$ref": "#/components/schemas/Client/properties/color"
                },
                "notes": {
                  "$ref": "#/components/schemas/Client/properties/notes"
                },
                "waiting_list": {
                  "description": "The total number of minutes for bookings currently on the waiting list for this client in the report time range",
                  "type": "integer"
                },
                "url": {
                  "$ref": "#/components/schemas/Client/properties/url"
                }
              }
            }
          },
          "waiting_list": {
            "description": "The total number of minutes for bookings currently on the waiting list for all clients in the report time range",
            "type": "integer",
            "example": 30
          }
        }
      },
      "ClientsReportV2": {
        "title": "Clients report",
        "description": "A report on clients for a specified time range",
        "allOf": [
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "clients",
              "unassigned"
            ],
            "properties": {
              "clients": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReportClientBreakdown"
                }
              },
              "unassigned": {
                "$ref": "#/components/schemas/ReportUnassignedBreakdown"
              }
            }
          },
          {
            "$ref": "#/components/schemas/ReportUnassignedBreakdown"
          }
        ],
        "required": []
      },
      "ClientUnassignedReport": {
        "title": "Unassigned client report",
        "description": "A report on bookings not assigned to a client for a specified time range",
        "allOf": [
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "resources"
            ],
            "properties": {
              "resources": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReportResourceBreakdown"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/ReportUnassignedBreakdown"
          }
        ]
      },
      "ProjectReportV1": {
        "title": "Project report",
        "description": "A report on a single project",
        "type": "object",
        "additionalProperties": false,
        "required": [],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Project/properties/id"
          },
          "booked": {
            "description": "The total number of booked minutes for this project in the report time range",
            "type": "integer",
            "example": 120
          },
          "client_name": {
            "type": "string",
            "maxLength": 255,
            "description": "The name of the client this project is associated with (or empty string if this project is not associated to a specific client)"
          },
          "color": {
            "$ref": "#/components/schemas/Project/properties/color"
          },
          "name": {
            "$ref": "#/components/schemas/Project/properties/name"
          },
          "resources": {
            "description": "A break-down for each resource that fits in the report scope",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "booked",
                "earliest_available_period",
                "id",
                "image",
                "job_title",
                "name",
                "resource_type",
                "url",
                "utilization",
                "waiting_list"
              ],
              "properties": {
                "id": {
                  "description": "The unique identifier of the project.",
                  "type": "integer",
                  "minimum": 1,
                  "example": 1
                },
                "name": {
                  "description": "The name of the project.",
                  "type": "integer",
                  "minimum": 1,
                  "example": 1
                },
                "project_code": {
                  "type": "string",
                  "maxLength": 255,
                  "description": "The project code."
                },
                "resource_type": {
                  "$ref": "#/components/schemas/ResourceType/properties/name"
                },
                "url": {
                  "$ref": "#/components/schemas/Resource/properties/url"
                },
                "job_title": {
                  "$ref": "#/components/schemas/Resource/properties/job_title"
                },
                "image": {
                  "$ref": "#/components/schemas/Resource/properties/image"
                },
                "booked": {
                  "description": "The number of booked minutes against for this resource in the report scope",
                  "type": "integer",
                  "example": 480
                },
                "waiting_list": {
                  "description": "The number of minutes for bookings on the waiting list for this resource in the report scope",
                  "type": "integer",
                  "example": 120
                },
                "utilization": {
                  "description": "The utilization of this resource in the report scope - 0 means no utilization, 1 means full utilization",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "example": 0.8
                },
                "earliest_available_period": {
                  "description": "A description of this resources next availability in the report time range",
                  "type": "string"
                }
              }
            }
          },
          "url": {
            "$ref": "#/components/schemas/Project/properties/url"
          },
          "waiting_list": {
            "description": "The total number of minutes for bookings currently on the waiting list for this project in the report time range",
            "type": "integer"
          }
        }
      },
      "ProjectReportV2": {
        "title": "Project report",
        "description": "A report on a single project for a specified time range",
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportProjectBreakdown"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "resources"
            ],
            "properties": {
              "resources": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReportResourceBreakdown"
                }
              }
            }
          }
        ]
      },
      "ProjectsReportV1": {
        "title": "Projects report",
        "description": "A report on projects for a specified time range",
        "type": "object",
        "additionalProperties": false,
        "required": [],
        "properties": {
          "booked": {
            "description": "The total number of booked minutes across all projects in the report time range",
            "type": "integer",
            "example": 120
          },
          "max_usage": {
            "description": "The number of booked minutes for the project with the highest number of booked minutes",
            "type": "integer",
            "example": 480
          },
          "projects": {
            "description": "A break-down of allocation for each project that fits in the report range",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "booked",
                "color",
                "id",
                "name",
                "waiting_list"
              ],
              "properties": {
                "id": {
                  "description": "The unique identifier of the project. An id of 0 indicates this is representative of bookings not allocated to a project",
                  "type": "integer",
                  "minimum": 0,
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "maxLength": 255,
                  "description": "The name of the project."
                },
                "project_code": {
                  "type": "string",
                  "maxLength": 255,
                  "description": "The project code."
                },
                "booked": {
                  "description": "The total number of booked minutes for this project in the report time range",
                  "type": "integer",
                  "example": 120
                },
                "color": {
                  "$ref": "#/components/schemas/Project/properties/color"
                },
                "waiting_list": {
                  "description": "The total number of minutes for bookings currently on the waiting list for this project in the report time range",
                  "type": "integer"
                },
                "url": {
                  "$ref": "#/components/schemas/Project/properties/url"
                },
                "client": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "name",
                    "url"
                  ],
                  "properties": {
                    "name": {
                      "$ref": "#/components/schemas/Client/properties/name"
                    },
                    "url": {
                      "$ref": "#/components/schemas/Client/properties/url"
                    }
                  }
                },
                "client_id": {
                  "nullable": true,
                  "description": "The client ID",
                  "type": "integer",
                  "minimum": 1,
                  "example": 1
                },
                "client_name": {
                  "$ref": "#/components/schemas/Client/properties/name"
                }
              }
            }
          },
          "waiting_list": {
            "description": "The total number of minutes for bookings currently on the waiting list for all projects in the report time range",
            "type": "integer",
            "example": 30
          }
        }
      },
      "ProjectsReportV2": {
        "title": "Projects report",
        "description": "A report on projects for a specified time range",
        "allOf": [
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "projects",
              "unassigned"
            ],
            "properties": {
              "projects": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReportProjectBreakdown"
                }
              },
              "unassigned": {
                "$ref": "#/components/schemas/ReportUnassignedBreakdown"
              }
            }
          },
          {
            "$ref": "#/components/schemas/ReportUnassignedBreakdown"
          }
        ],
        "required": []
      },
      "ProjectUnassignedReport": {
        "title": "Unassigned project report",
        "description": "A report on bookings not assigned to a project for a specified time range",
        "allOf": [
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "resources"
            ],
            "properties": {
              "resources": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReportResourceBreakdown"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/ReportUnassignedBreakdown"
          }
        ]
      },
      "ReportBillableTimeBreakdown": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "billable",
          "non_billable",
          "total"
        ],
        "properties": {
          "billable": {
            "x-rg-doctype": "response",
            "description": "A duration represented in units of days, hours and minutes.",
            "type": "object",
            "additionalProperties": false,
            "required": [
              "days",
              "hours",
              "minutes"
            ],
            "properties": {
              "days": {
                "description": "The duration represented as a decimal number of available days",
                "type": "number",
                "example": 1.5625
              },
              "hours": {
                "description": "The duration represented as a decimal number of hours",
                "type": "number",
                "example": 12.5
              },
              "minutes": {
                "description": "The duration represented as an integer number of minutes",
                "type": "integer",
                "example": 750
              }
            }
          },
          "non_billable": {
            "x-rg-doctype": "response",
            "description": "A duration represented in units of days, hours and minutes.",
            "type": "object",
            "additionalProperties": false,
            "required": [
              "days",
              "hours",
              "minutes"
            ],
            "properties": {
              "days": {
                "description": "The duration represented as a decimal number of available days",
                "type": "number",
                "example": 1.5625
              },
              "hours": {
                "description": "The duration represented as a decimal number of hours",
                "type": "number",
                "example": 12.5
              },
              "minutes": {
                "description": "The duration represented as an integer number of minutes",
                "type": "integer",
                "example": 750
              }
            }
          },
          "total": {
            "x-rg-doctype": "response",
            "description": "A duration represented in units of days, hours and minutes.",
            "type": "object",
            "additionalProperties": false,
            "required": [
              "days",
              "hours",
              "minutes"
            ],
            "properties": {
              "days": {
                "description": "The duration represented as a decimal number of available days",
                "type": "number",
                "example": 1.5625
              },
              "hours": {
                "description": "The duration represented as a decimal number of hours",
                "type": "number",
                "example": 12.5
              },
              "minutes": {
                "description": "The duration represented as an integer number of minutes",
                "type": "integer",
                "example": 750
              }
            }
          }
        }
      },
      "ReportClientBreakdown": {
        "allOf": [
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "color",
              "id",
              "name"
            ],
            "properties": {
              "color": {
                "$ref": "#/components/schemas/Client/properties/color"
              },
              "id": {
                "$ref": "#/components/schemas/Client/properties/id"
              },
              "name": {
                "$ref": "#/components/schemas/Client/properties/name"
              }
            }
          },
          {
            "$ref": "#/components/schemas/ReportUnassignedBreakdown"
          }
        ]
      },
      "ReportDowntime": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "other",
          "personal_vacation",
          "public_holiday",
          "sick",
          "total_vacation"
        ],
        "properties": {
          "other": {
            "$ref": "#/components/schemas/ReportDuration"
          },
          "personal_vacation": {
            "$ref": "#/components/schemas/ReportDuration"
          },
          "public_holiday": {
            "$ref": "#/components/schemas/ReportDuration"
          },
          "sick": {
            "$ref": "#/components/schemas/ReportDuration"
          },
          "total_vacation": {
            "$ref": "#/components/schemas/ReportDuration"
          }
        }
      },
      "ReportDuration": {
        "description": "A duration represented in units of days, hours and minutes.",
        "type": "object",
        "additionalProperties": false,
        "required": [],
        "properties": {
          "days": {
            "description": "The duration represented as a decimal number of available days",
            "type": "number",
            "example": 1.5625
          },
          "hours": {
            "description": "The duration represented as a decimal number of hours",
            "type": "number",
            "example": 12.5
          },
          "minutes": {
            "description": "The duration represented as an integer number of minutes",
            "type": "integer",
            "example": 750
          }
        }
      },
      "ReportProjectBreakdown": {
        "allOf": [
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "client",
              "color",
              "id",
              "name",
              "project_code"
            ],
            "properties": {
              "client": {
                "nullable": true,
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "id",
                  "name",
                  "color"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/Client/properties/id"
                  },
                  "name": {
                    "$ref": "#/components/schemas/Client/properties/name"
                  },
                  "color": {
                    "$ref": "#/components/schemas/Client/properties/color"
                  }
                }
              },
              "color": {
                "$ref": "#/components/schemas/Project/properties/color"
              },
              "id": {
                "$ref": "#/components/schemas/Project/properties/id"
              },
              "name": {
                "$ref": "#/components/schemas/Project/properties/name"
              },
              "project_code": {
                "$ref": "#/components/schemas/Project/properties/project_code"
              }
            }
          },
          {
            "$ref": "#/components/schemas/ReportUnassignedBreakdown"
          }
        ]
      },
      "ReportResourceBreakdown": {
        "allOf": [
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "color",
              "id",
              "image",
              "job_title",
              "name",
              "reported_date_range",
              "resource_type"
            ],
            "properties": {
              "id": {
                "$ref": "#/components/schemas/Resource/properties/id"
              },
              "name": {
                "$ref": "#/components/schemas/Resource/properties/name"
              },
              "color": {
                "$ref": "#/components/schemas/Resource/properties/color"
              },
              "image": {
                "$ref": "#/components/schemas/Resource/properties/image"
              },
              "job_title": {
                "$ref": "#/components/schemas/Resource/properties/job_title"
              },
              "reported_date_range": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "start",
                  "end"
                ],
                "properties": {
                  "start": {
                    "$ref": "#/components/schemas/ISODateString"
                  },
                  "end": {
                    "$ref": "#/components/schemas/ISODateString"
                  }
                },
                "description": "The date range of available data for the report. This may be shorter than the date range requested if the resource's availability doesn't cover the requested date range."
              },
              "resource_type": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "id",
                  "name"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/ResourceType/properties/id"
                  },
                  "name": {
                    "$ref": "#/components/schemas/Resource/properties/resource_type/properties/name"
                  }
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/ReportUnassignedBreakdown"
          }
        ]
      },
      "ReportResourceSummary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportResourceBreakdown"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "availability",
              "custom_fields",
              "downtime",
              "overtime",
              "unscheduled",
              "tentative",
              "utilization"
            ],
            "properties": {
              "availability": {
                "$ref": "#/components/schemas/ReportDuration"
              },
              "custom_fields": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "label",
                    "selected_options"
                  ],
                  "properties": {
                    "id": {
                      "$ref": "#/components/schemas/EntityId"
                    },
                    "label": {
                      "$ref": "#/components/schemas/ShortString"
                    },
                    "selected_options": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "id",
                          "value"
                        ],
                        "properties": {
                          "id": {
                            "$ref": "#/components/schemas/EntityId"
                          },
                          "value": {
                            "$ref": "#/components/schemas/ShortString"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "downtime": {
                "$ref": "#/components/schemas/ReportDowntime"
              },
              "overtime": {
                "$ref": "#/components/schemas/ReportDuration"
              },
              "unscheduled": {
                "$ref": "#/components/schemas/ReportDuration"
              },
              "tentative": {
                "$ref": "#/components/schemas/ReportDuration"
              },
              "utilization": {
                "$ref": "#/components/schemas/ReportUtilizationBreakdown"
              }
            }
          }
        ],
        "required": []
      },
      "ReportUnassignedBreakdown": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "scheduled",
          "waiting_list"
        ],
        "properties": {
          "scheduled": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "billable",
              "non_billable",
              "total"
            ],
            "properties": {
              "billable": {
                "x-rg-doctype": "response",
                "description": "A duration represented in units of days, hours and minutes.",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "days",
                  "hours",
                  "minutes"
                ],
                "properties": {
                  "days": {
                    "description": "The duration represented as a decimal number of available days",
                    "type": "number",
                    "example": 1.5625
                  },
                  "hours": {
                    "description": "The duration represented as a decimal number of hours",
                    "type": "number",
                    "example": 12.5
                  },
                  "minutes": {
                    "description": "The duration represented as an integer number of minutes",
                    "type": "integer",
                    "example": 750
                  }
                }
              },
              "non_billable": {
                "x-rg-doctype": "response",
                "description": "A duration represented in units of days, hours and minutes.",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "days",
                  "hours",
                  "minutes"
                ],
                "properties": {
                  "days": {
                    "description": "The duration represented as a decimal number of available days",
                    "type": "number",
                    "example": 1.5625
                  },
                  "hours": {
                    "description": "The duration represented as a decimal number of hours",
                    "type": "number",
                    "example": 12.5
                  },
                  "minutes": {
                    "description": "The duration represented as an integer number of minutes",
                    "type": "integer",
                    "example": 750
                  }
                }
              },
              "total": {
                "x-rg-doctype": "response",
                "description": "A duration represented in units of days, hours and minutes.",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "days",
                  "hours",
                  "minutes"
                ],
                "properties": {
                  "days": {
                    "description": "The duration represented as a decimal number of available days",
                    "type": "number",
                    "example": 1.5625
                  },
                  "hours": {
                    "description": "The duration represented as a decimal number of hours",
                    "type": "number",
                    "example": 12.5
                  },
                  "minutes": {
                    "description": "The duration represented as an integer number of minutes",
                    "type": "integer",
                    "example": 750
                  }
                }
              }
            }
          },
          "waiting_list": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "billable",
              "non_billable",
              "total"
            ],
            "properties": {
              "billable": {
                "x-rg-doctype": "response",
                "description": "A duration represented in units of days, hours and minutes.",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "days",
                  "hours",
                  "minutes"
                ],
                "properties": {
                  "days": {
                    "description": "The duration represented as a decimal number of available days",
                    "type": "number",
                    "example": 1.5625
                  },
                  "hours": {
                    "description": "The duration represented as a decimal number of hours",
                    "type": "number",
                    "example": 12.5
                  },
                  "minutes": {
                    "description": "The duration represented as an integer number of minutes",
                    "type": "integer",
                    "example": 750
                  }
                }
              },
              "non_billable": {
                "x-rg-doctype": "response",
                "description": "A duration represented in units of days, hours and minutes.",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "days",
                  "hours",
                  "minutes"
                ],
                "properties": {
                  "days": {
                    "description": "The duration represented as a decimal number of available days",
                    "type": "number",
                    "example": 1.5625
                  },
                  "hours": {
                    "description": "The duration represented as a decimal number of hours",
                    "type": "number",
                    "example": 12.5
                  },
                  "minutes": {
                    "description": "The duration represented as an integer number of minutes",
                    "type": "integer",
                    "example": 750
                  }
                }
              },
              "total": {
                "x-rg-doctype": "response",
                "description": "A duration represented in units of days, hours and minutes.",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "days",
                  "hours",
                  "minutes"
                ],
                "properties": {
                  "days": {
                    "description": "The duration represented as a decimal number of available days",
                    "type": "number",
                    "example": 1.5625
                  },
                  "hours": {
                    "description": "The duration represented as a decimal number of hours",
                    "type": "number",
                    "example": 12.5
                  },
                  "minutes": {
                    "description": "The duration represented as an integer number of minutes",
                    "type": "integer",
                    "example": 750
                  }
                }
              }
            }
          }
        }
      },
      "ReportUtilizationBreakdown": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "billable",
          "non_billable",
          "total"
        ],
        "properties": {
          "billable": {
            "type": "number"
          },
          "non_billable": {
            "type": "number"
          },
          "total": {
            "type": "number"
          }
        }
      },
      "ResourceReportV1": {
        "title": "Resource report",
        "description": "A report for a resource in a specified time range",
        "type": "object",
        "additionalProperties": false,
        "required": [],
        "properties": {
          "availability": {
            "description": "The total number of available minutes for this resource during the report time range",
            "type": "integer",
            "example": 24000
          },
          "booked": {
            "description": "The total number of booked minutes for this resource during the report time range",
            "type": "integer",
            "example": 19200
          },
          "clients": {
            "description": "A break-down of allocation for each client that fits in the report range",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "booked",
                "color",
                "id",
                "max_usage",
                "name",
                "waiting_list"
              ],
              "properties": {
                "booked": {
                  "description": "The total number of booked minutes for this client in the report scope",
                  "type": "integer",
                  "example": 120
                },
                "color": {
                  "$ref": "#/components/schemas/Client/properties/color"
                },
                "id": {
                  "oneOf": [
                    {
                      "description": "An id of 0 indicates this is representative of bookings not allocated to a client",
                      "type": "integer",
                      "enum": [
                        0
                      ]
                    },
                    {
                      "$ref": "#/components/schemas/Client/properties/id"
                    }
                  ]
                },
                "max_usage": {
                  "type": "integer"
                },
                "name": {
                  "$ref": "#/components/schemas/Client/properties/name"
                },
                "waiting_list": {
                  "description": "The total number of minutes for bookings currently on the waiting list for this client in the report scope",
                  "type": "integer"
                }
              }
            }
          },
          "custom_fields": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "The property name is the custom field ID and the value is an array of selected option labels",
            "x-patternProperties": {
              "^\\d+$": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "downtime_types": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "downtime_type",
                "minutes",
                "minutes_without_overlap",
                "days",
                "days_without_overlap"
              ],
              "properties": {
                "downtime_type": {
                  "$ref": "#/components/schemas/DowntimeType/properties/name"
                },
                "minutes": {
                  "description": "The number of downtime minutes recorded of this type for this resource during the report period",
                  "type": "integer"
                },
                "minutes_without_overlap": {
                  "description": "The number of downtime minutes recorded of this type for this resource during the report period with duplicate minutes removed",
                  "type": "integer"
                },
                "days": {
                  "description": "The number of downtime days recorded of this type for this resource during the report period",
                  "type": "number"
                },
                "days_without_overlap": {
                  "description": "The number of downtime days recorded of this type for this resource during the report period with duplicate days removed",
                  "type": "number"
                }
              }
            }
          },
          "earliest_available_period": {
            "description": "A description of this resources next availability in the report time range",
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/Resource/properties/id"
          },
          "image": {
            "$ref": "#/components/schemas/Resource/properties/image"
          },
          "job_title": {
            "$ref": "#/components/schemas/Resource/properties/job_title"
          },
          "name": {
            "$ref": "#/components/schemas/Resource/properties/name"
          },
          "other_downtime": {
            "description": "Other downtime for this resource during the report range in minutes",
            "type": "integer"
          },
          "other_downtime_days": {
            "description": "Other downtime for this resource during the report range in days",
            "type": "number"
          },
          "personal_vacation_downtime": {
            "description": "Personal holiday downtime for this resource during the report range in minutes",
            "type": "integer"
          },
          "personal_vacation_downtime_days": {
            "description": "Personal holiday downtime for this resource during the report range in days",
            "type": "number"
          },
          "projects": {
            "description": "A break-down of allocation for each project that fits in the report range",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "booked",
                "client_name",
                "color",
                "id",
                "max_usage",
                "name",
                "waiting_list"
              ],
              "properties": {
                "booked": {
                  "description": "The total number of booked minutes for this project in the report scope",
                  "type": "integer",
                  "example": 120
                },
                "client_name": {
                  "type": "string",
                  "maxLength": 255,
                  "description": "The name of the client related to this project (if any)"
                },
                "client": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "url"
                  ],
                  "properties": {
                    "id": {
                      "$ref": "#/components/schemas/Client/properties/id"
                    },
                    "name": {
                      "$ref": "#/components/schemas/Client/properties/name"
                    },
                    "url": {
                      "$ref": "#/components/schemas/Client/properties/url"
                    }
                  }
                },
                "color": {
                  "$ref": "#/components/schemas/Project/properties/color"
                },
                "id": {
                  "oneOf": [
                    {
                      "description": "An id of 0 indicates this is representative of bookings not allocated to a project",
                      "type": "integer",
                      "enum": [
                        0
                      ]
                    },
                    {
                      "$ref": "#/components/schemas/Project/properties/id"
                    }
                  ]
                },
                "max_usage": {
                  "type": "integer"
                },
                "name": {
                  "$ref": "#/components/schemas/Project/properties/name"
                },
                "waiting_list": {
                  "description": "The total number of minutes for bookings currently on the waiting list for this project in the report scope",
                  "type": "integer"
                }
              }
            }
          },
          "public_holiday_downtime": {
            "description": "Public holiday downtime for this resource during the report range in minutes",
            "type": "integer"
          },
          "public_holiday_downtime_days": {
            "description": "Public holiday downtime for this resource during the report range in days",
            "type": "number"
          },
          "resource_type": {
            "$ref": "#/components/schemas/ResourceType/properties/name"
          },
          "sick_downtime": {
            "description": "Sickness downtime for this resource during the report range in minutes",
            "type": "integer"
          },
          "sick_downtime_days": {
            "description": "Sickness downtime for this resource during the report range in days",
            "type": "number"
          },
          "total_vacation_downtime": {
            "description": "Total public/private holiday downtime for this resource during the report range in minutes",
            "type": "integer"
          },
          "total_vacation_downtime_days": {
            "description": "Total public/private holiday downtime for this resource during the report range in days",
            "type": "number"
          },
          "unbooked": {
            "description": "The total number of unbooked minutes for this resource in the report time range",
            "type": "integer"
          },
          "url": {
            "$ref": "#/components/schemas/Resource/properties/url"
          },
          "utilization": {
            "description": "The overall utilization of this resource during the report scope - 0 means no utilization, 1 means full utilization",
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "example": 0.8
          },
          "waiting_list": {
            "description": "The total number of minutes for bookings currently on the waiting list for this resource in the report time range",
            "type": "integer"
          }
        }
      },
      "ResourceReportV2": {
        "title": "Resource report",
        "description": "A report on a resource for a specified time range",
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportResourceSummary"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "clients",
              "clients_unassigned",
              "downtime_types",
              "projects",
              "projects_unassigned"
            ],
            "properties": {
              "clients": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReportClientBreakdown"
                }
              },
              "clients_unassigned": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "scheduled",
                  "waiting_list"
                ],
                "properties": {
                  "scheduled": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "billable",
                      "non_billable",
                      "total"
                    ],
                    "properties": {
                      "billable": {
                        "x-rg-doctype": "response",
                        "description": "A duration represented in units of days, hours and minutes.",
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "days",
                          "hours",
                          "minutes"
                        ],
                        "properties": {
                          "days": {
                            "description": "The duration represented as a decimal number of available days",
                            "type": "number",
                            "example": 1.5625
                          },
                          "hours": {
                            "description": "The duration represented as a decimal number of hours",
                            "type": "number",
                            "example": 12.5
                          },
                          "minutes": {
                            "description": "The duration represented as an integer number of minutes",
                            "type": "integer",
                            "example": 750
                          }
                        }
                      },
                      "non_billable": {
                        "x-rg-doctype": "response",
                        "description": "A duration represented in units of days, hours and minutes.",
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "days",
                          "hours",
                          "minutes"
                        ],
                        "properties": {
                          "days": {
                            "description": "The duration represented as a decimal number of available days",
                            "type": "number",
                            "example": 1.5625
                          },
                          "hours": {
                            "description": "The duration represented as a decimal number of hours",
                            "type": "number",
                            "example": 12.5
                          },
                          "minutes": {
                            "description": "The duration represented as an integer number of minutes",
                            "type": "integer",
                            "example": 750
                          }
                        }
                      },
                      "total": {
                        "x-rg-doctype": "response",
                        "description": "A duration represented in units of days, hours and minutes.",
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "days",
                          "hours",
                          "minutes"
                        ],
                        "properties": {
                          "days": {
                            "description": "The duration represented as a decimal number of available days",
                            "type": "number",
                            "example": 1.5625
                          },
                          "hours": {
                            "description": "The duration represented as a decimal number of hours",
                            "type": "number",
                            "example": 12.5
                          },
                          "minutes": {
                            "description": "The duration represented as an integer number of minutes",
                            "type": "integer",
                            "example": 750
                          }
                        }
                      }
                    }
                  },
                  "waiting_list": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "billable",
                      "non_billable",
                      "total"
                    ],
                    "properties": {
                      "billable": {
                        "x-rg-doctype": "response",
                        "description": "A duration represented in units of days, hours and minutes.",
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "days",
                          "hours",
                          "minutes"
                        ],
                        "properties": {
                          "days": {
                            "description": "The duration represented as a decimal number of available days",
                            "type": "number",
                            "example": 1.5625
                          },
                          "hours": {
                            "description": "The duration represented as a decimal number of hours",
                            "type": "number",
                            "example": 12.5
                          },
                          "minutes": {
                            "description": "The duration represented as an integer number of minutes",
                            "type": "integer",
                            "example": 750
                          }
                        }
                      },
                      "non_billable": {
                        "x-rg-doctype": "response",
                        "description": "A duration represented in units of days, hours and minutes.",
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "days",
                          "hours",
                          "minutes"
                        ],
                        "properties": {
                          "days": {
                            "description": "The duration represented as a decimal number of available days",
                            "type": "number",
                            "example": 1.5625
                          },
                          "hours": {
                            "description": "The duration represented as a decimal number of hours",
                            "type": "number",
                            "example": 12.5
                          },
                          "minutes": {
                            "description": "The duration represented as an integer number of minutes",
                            "type": "integer",
                            "example": 750
                          }
                        }
                      },
                      "total": {
                        "x-rg-doctype": "response",
                        "description": "A duration represented in units of days, hours and minutes.",
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "days",
                          "hours",
                          "minutes"
                        ],
                        "properties": {
                          "days": {
                            "description": "The duration represented as a decimal number of available days",
                            "type": "number",
                            "example": 1.5625
                          },
                          "hours": {
                            "description": "The duration represented as a decimal number of hours",
                            "type": "number",
                            "example": 12.5
                          },
                          "minutes": {
                            "description": "The duration represented as an integer number of minutes",
                            "type": "integer",
                            "example": 750
                          }
                        }
                      }
                    }
                  }
                }
              },
              "downtime_types": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "downtime_type",
                    "scheduled",
                    "scheduled_without_overlap"
                  ],
                  "properties": {
                    "downtime_type": {
                      "$ref": "#/components/schemas/DowntimeType/properties/name"
                    },
                    "scheduled": {
                      "$ref": "#/components/schemas/ReportDuration"
                    },
                    "scheduled_without_overlap": {
                      "$ref": "#/components/schemas/ReportDuration"
                    }
                  }
                }
              },
              "projects": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReportProjectBreakdown"
                }
              },
              "projects_unassigned": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "scheduled",
                  "waiting_list"
                ],
                "properties": {
                  "scheduled": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "billable",
                      "non_billable",
                      "total"
                    ],
                    "properties": {
                      "billable": {
                        "x-rg-doctype": "response",
                        "description": "A duration represented in units of days, hours and minutes.",
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "days",
                          "hours",
                          "minutes"
                        ],
                        "properties": {
                          "days": {
                            "description": "The duration represented as a decimal number of available days",
                            "type": "number",
                            "example": 1.5625
                          },
                          "hours": {
                            "description": "The duration represented as a decimal number of hours",
                            "type": "number",
                            "example": 12.5
                          },
                          "minutes": {
                            "description": "The duration represented as an integer number of minutes",
                            "type": "integer",
                            "example": 750
                          }
                        }
                      },
                      "non_billable": {
                        "x-rg-doctype": "response",
                        "description": "A duration represented in units of days, hours and minutes.",
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "days",
                          "hours",
                          "minutes"
                        ],
                        "properties": {
                          "days": {
                            "description": "The duration represented as a decimal number of available days",
                            "type": "number",
                            "example": 1.5625
                          },
                          "hours": {
                            "description": "The duration represented as a decimal number of hours",
                            "type": "number",
                            "example": 12.5
                          },
                          "minutes": {
                            "description": "The duration represented as an integer number of minutes",
                            "type": "integer",
                            "example": 750
                          }
                        }
                      },
                      "total": {
                        "x-rg-doctype": "response",
                        "description": "A duration represented in units of days, hours and minutes.",
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "days",
                          "hours",
                          "minutes"
                        ],
                        "properties": {
                          "days": {
                            "description": "The duration represented as a decimal number of available days",
                            "type": "number",
                            "example": 1.5625
                          },
                          "hours": {
                            "description": "The duration represented as a decimal number of hours",
                            "type": "number",
                            "example": 12.5
                          },
                          "minutes": {
                            "description": "The duration represented as an integer number of minutes",
                            "type": "integer",
                            "example": 750
                          }
                        }
                      }
                    }
                  },
                  "waiting_list": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "billable",
                      "non_billable",
                      "total"
                    ],
                    "properties": {
                      "billable": {
                        "x-rg-doctype": "response",
                        "description": "A duration represented in units of days, hours and minutes.",
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "days",
                          "hours",
                          "minutes"
                        ],
                        "properties": {
                          "days": {
                            "description": "The duration represented as a decimal number of available days",
                            "type": "number",
                            "example": 1.5625
                          },
                          "hours": {
                            "description": "The duration represented as a decimal number of hours",
                            "type": "number",
                            "example": 12.5
                          },
                          "minutes": {
                            "description": "The duration represented as an integer number of minutes",
                            "type": "integer",
                            "example": 750
                          }
                        }
                      },
                      "non_billable": {
                        "x-rg-doctype": "response",
                        "description": "A duration represented in units of days, hours and minutes.",
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "days",
                          "hours",
                          "minutes"
                        ],
                        "properties": {
                          "days": {
                            "description": "The duration represented as a decimal number of available days",
                            "type": "number",
                            "example": 1.5625
                          },
                          "hours": {
                            "description": "The duration represented as a decimal number of hours",
                            "type": "number",
                            "example": 12.5
                          },
                          "minutes": {
                            "description": "The duration represented as an integer number of minutes",
                            "type": "integer",
                            "example": 750
                          }
                        }
                      },
                      "total": {
                        "x-rg-doctype": "response",
                        "description": "A duration represented in units of days, hours and minutes.",
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "days",
                          "hours",
                          "minutes"
                        ],
                        "properties": {
                          "days": {
                            "description": "The duration represented as a decimal number of available days",
                            "type": "number",
                            "example": 1.5625
                          },
                          "hours": {
                            "description": "The duration represented as a decimal number of hours",
                            "type": "number",
                            "example": 12.5
                          },
                          "minutes": {
                            "description": "The duration represented as an integer number of minutes",
                            "type": "integer",
                            "example": 750
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "required": []
      },
      "ResourcesReportV1": {
        "title": "Resources report",
        "description": "A report on resources for a specified time range",
        "type": "object",
        "additionalProperties": false,
        "required": [],
        "properties": {
          "availability": {
            "description": "The total number of available minutes across all resources in the report time range",
            "type": "integer",
            "example": 24000
          },
          "booked": {
            "description": "The total number of booked minutes across all resources in the report time range",
            "type": "integer",
            "example": 19200
          },
          "resources": {
            "description": "A break-down of allocation for each resource that fits in the report range",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "availability",
                "booked",
                "custom_fields",
                "id",
                "image",
                "job_title",
                "name",
                "other_downtime",
                "other_downtime_days",
                "personal_vacation_downtime",
                "personal_vacation_downtime_days",
                "public_holiday_downtime",
                "public_holiday_downtime_days",
                "resource_type",
                "sick_downtime",
                "sick_downtime_days",
                "total_vacation_downtime",
                "total_vacation_downtime_days",
                "unbooked",
                "url",
                "utilization",
                "waiting_list"
              ],
              "properties": {
                "availability": {
                  "description": "The total number of available minutes for this resource in the report time range",
                  "type": "integer",
                  "example": 2400
                },
                "booked": {
                  "description": "The total number of booked minutes for this resource in the report time range",
                  "type": "integer",
                  "example": 120
                },
                "custom_fields": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "description": "The property name is the custom field ID and the value is an array of selected option IDs",
                  "x-patternProperties": {
                    "^\\d+$": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "id": {
                  "$ref": "#/components/schemas/Resource/properties/id"
                },
                "image": {
                  "$ref": "#/components/schemas/Resource/properties/image"
                },
                "job_title": {
                  "$ref": "#/components/schemas/Resource/properties/job_title"
                },
                "name": {
                  "$ref": "#/components/schemas/Resource/properties/name"
                },
                "other_downtime": {
                  "description": "Other downtime for this resource during the report range in minutes",
                  "type": "integer"
                },
                "other_downtime_days": {
                  "description": "Other downtime for this resource during the report range in days",
                  "type": "number"
                },
                "personal_vacation_downtime": {
                  "description": "Personal holiday downtime for this resource during the report range in minutes",
                  "type": "integer"
                },
                "personal_vacation_downtime_days": {
                  "description": "Personal holiday downtime for this resource during the report range in days",
                  "type": "number"
                },
                "public_holiday_downtime": {
                  "description": "Public holiday downtime for this resource during the report range in minutes",
                  "type": "integer"
                },
                "public_holiday_downtime_days": {
                  "description": "Public holiday downtime for this resource during the report range in days",
                  "type": "number"
                },
                "resource_type": {
                  "$ref": "#/components/schemas/ResourceType/properties/name"
                },
                "sick_downtime": {
                  "description": "Sickness downtime for this resource during the report range in minutes",
                  "type": "integer"
                },
                "sick_downtime_days": {
                  "description": "Sickness downtime for this resource during the report range in days",
                  "type": "number"
                },
                "total_vacation_downtime": {
                  "description": "Total public/private holiday downtime for this resource during the report range in minutes",
                  "type": "integer"
                },
                "total_vacation_downtime_days": {
                  "description": "Total public/private holiday downtime for this resource during the report range in days",
                  "type": "number"
                },
                "unbooked": {
                  "description": "The total number of unbooked minutes for this resource in the report time range",
                  "type": "integer"
                },
                "url": {
                  "$ref": "#/components/schemas/Resource/properties/url"
                },
                "utilization": {
                  "description": "The overall utilization of this resource during the report scope - 0 means no utilization, 1 means full utilization",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "example": 0.8
                },
                "waiting_list": {
                  "description": "The total number of minutes for bookings currently on the waiting list for this resource in the report time range",
                  "type": "integer"
                }
              }
            }
          },
          "unbooked": {
            "description": "The total number of unbooked minutes across all resources in the report time range",
            "type": "integer",
            "example": 30
          },
          "utilization": {
            "description": "The overall utilization of resources in the report scope - 0 means no utilization, 1 means full utilization",
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "example": 0.8
          },
          "waiting_list": {
            "description": "The total number of minutes for bookings currently on the waiting list for all resources in the report time range",
            "type": "integer",
            "example": 30
          }
        }
      },
      "ResourcesReportV2": {
        "title": "Resources report",
        "description": "A report on resources for a specified time range",
        "type": "object",
        "additionalProperties": false,
        "required": [],
        "properties": {
          "availability": {
            "x-rg-doctype": "response",
            "description": "The total available time for all resources in this report.",
            "type": "object",
            "additionalProperties": false,
            "required": [
              "days",
              "hours",
              "minutes"
            ],
            "properties": {
              "days": {
                "description": "The duration represented as a decimal number of available days",
                "type": "number",
                "example": 1.5625
              },
              "hours": {
                "description": "The duration represented as a decimal number of hours",
                "type": "number",
                "example": 12.5
              },
              "minutes": {
                "description": "The duration represented as an integer number of minutes",
                "type": "integer",
                "example": 750
              }
            }
          },
          "downtime": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "other",
              "personal_vacation",
              "public_holiday",
              "sick",
              "total_vacation"
            ],
            "properties": {
              "other": {
                "$ref": "#/components/schemas/ReportDuration"
              },
              "personal_vacation": {
                "$ref": "#/components/schemas/ReportDuration"
              },
              "public_holiday": {
                "$ref": "#/components/schemas/ReportDuration"
              },
              "sick": {
                "$ref": "#/components/schemas/ReportDuration"
              },
              "total_vacation": {
                "$ref": "#/components/schemas/ReportDuration"
              }
            },
            "description": "The total downtime for all resources in this report, broken down by downtime type."
          },
          "overtime": {
            "x-rg-doctype": "response",
            "description": "The total overtime for all resources in this report.",
            "type": "object",
            "additionalProperties": false,
            "required": [
              "days",
              "hours",
              "minutes"
            ],
            "properties": {
              "days": {
                "description": "The duration represented as a decimal number of available days",
                "type": "number",
                "example": 1.5625
              },
              "hours": {
                "description": "The duration represented as a decimal number of hours",
                "type": "number",
                "example": 12.5
              },
              "minutes": {
                "description": "The duration represented as an integer number of minutes",
                "type": "integer",
                "example": 750
              }
            }
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportResourceSummary"
            }
          },
          "scheduled": {
            "$ref": "#/components/schemas/ReportBillableTimeBreakdown"
          },
          "unscheduled": {
            "x-rg-doctype": "response",
            "description": "A duration represented in units of days, hours and minutes.",
            "type": "object",
            "additionalProperties": false,
            "required": [
              "days",
              "hours",
              "minutes"
            ],
            "properties": {
              "days": {
                "description": "The duration represented as a decimal number of available days",
                "type": "number",
                "example": 1.5625
              },
              "hours": {
                "description": "The duration represented as a decimal number of hours",
                "type": "number",
                "example": 12.5
              },
              "minutes": {
                "description": "The duration represented as an integer number of minutes",
                "type": "integer",
                "example": 750
              }
            }
          },
          "tentative": {
            "x-rg-doctype": "response",
            "description": "A duration represented in units of days, hours and minutes.",
            "type": "object",
            "additionalProperties": false,
            "required": [
              "days",
              "hours",
              "minutes"
            ],
            "properties": {
              "days": {
                "description": "The duration represented as a decimal number of available days",
                "type": "number",
                "example": 1.5625
              },
              "hours": {
                "description": "The duration represented as a decimal number of hours",
                "type": "number",
                "example": 12.5
              },
              "minutes": {
                "description": "The duration represented as an integer number of minutes",
                "type": "integer",
                "example": 750
              }
            }
          },
          "utilization": {
            "$ref": "#/components/schemas/ReportUtilizationBreakdown"
          },
          "waiting_list": {
            "$ref": "#/components/schemas/ReportBillableTimeBreakdown"
          }
        }
      },
      "NewReportSavedFilter": {
        "title": "A new report saved filter",
        "description": "A request body for creating a saved filter for reports",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "filter_json",
          "filter_type"
        ],
        "properties": {
          "name": {
            "$ref": "#/components/schemas/ReportSavedFilter/properties/name"
          },
          "filter_json": {
            "$ref": "#/components/schemas/ReportSavedFilter/properties/filter_json"
          },
          "filter_type": {
            "$ref": "#/components/schemas/ReportSavedFilter/properties/filter_type"
          }
        }
      },
      "ReportSavedFilter": {
        "title": "A report saved filter",
        "description": "A saved filter for reports",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "filter_type",
          "filter_json",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "The unique identifier of the saved filter",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "description": "The name of this filter"
          },
          "filter_type": {
            "description": "The type of the filter - this affects which report the filter can be applied to",
            "type": "string",
            "enum": [
              "Resources",
              "Projects"
            ]
          },
          "filter_json": {
            "type": "string",
            "maxLength": 65535,
            "minLength": 1,
            "description": "The filter encoded as a JSON string"
          },
          "created_at": {
            "$ref": "#/components/schemas/ISODateTimeString"
          },
          "updated_at": {
            "$ref": "#/components/schemas/ISODateTimeString"
          }
        }
      },
      "ReportSavedFilters": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ReportSavedFilter"
        }
      },
      "UpdateReportSavedFilter": {
        "title": "A report saved filter patch",
        "description": "A request body for updating a report saved filter for booking records",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/ReportSavedFilter/properties/name"
          },
          "filter_json": {
            "$ref": "#/components/schemas/ReportSavedFilter/properties/filter_json"
          },
          "filter_type": {
            "$ref": "#/components/schemas/ReportSavedFilter/properties/filter_type"
          }
        }
      },
      "ResourceType": {
        "title": "Resource type",
        "description": "Response representing a resource type",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "human",
          "created_at",
          "updated_at",
          "custom_attributes",
          "custom_fields"
        ],
        "properties": {
          "id": {
            "description": "The unique identifier of the resource type.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "human": {
            "description": "If `true`, then resources with this resource type will follow human resource booking rules.",
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "The name of this resource type."
          },
          "created_at": {
            "description": "The date and time this resource type was created at.",
            "example": "2020-12-31T14:29:29.000Z",
            "type": "string",
            "format": "iso-date-time-string"
          },
          "updated_at": {
            "description": "The date and time this resource type was last updated (or created at).",
            "example": "2020-12-31T14:29:29.000Z",
            "type": "string",
            "format": "iso-date-time-string"
          },
          "custom_attributes": {
            "description": "Custom attributes are generated by default.",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 255,
              "enum": [
                "phone",
                "capacity",
                "registration_number"
              ]
            }
          },
          "custom_fields": {
            "description": "Custom fields are created by users and custom field options are the only allowed values.",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "id",
                "name",
                "required",
                "single_select",
                "created_at",
                "updated_at",
                "custom_field_options"
              ],
              "properties": {
                "id": {
                  "description": "The unique identifier of the custom field",
                  "type": "integer",
                  "minimum": 1,
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "maxLength": 255,
                  "description": "The name of the custom field"
                },
                "required": {
                  "description": "Whether a value for this field is required",
                  "type": "boolean"
                },
                "single_select": {
                  "description": "When false, mutiple options can be selected and at least one option is required",
                  "type": "boolean"
                },
                "created_at": {
                  "description": "The date and time this custom field was created at",
                  "example": "2020-12-31T14:29:29.000Z",
                  "type": "string",
                  "format": "iso-date-time-string"
                },
                "updated_at": {
                  "description": "The date and time this custom field was last updated (or created at)",
                  "example": "2020-12-31T14:29:29.000Z",
                  "type": "string",
                  "format": "iso-date-time-string"
                },
                "custom_field_options": {
                  "description": "Describe the allowed values for a custom field",
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "option"
                  ],
                  "properties": {
                    "id": {
                      "description": "The unique identifier of the custom field option",
                      "type": "integer",
                      "minimum": 1,
                      "example": 1
                    },
                    "value": {
                      "type": "string",
                      "maxLength": 255,
                      "description": "The value for this option"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ResourceTypes": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ResourceType"
        }
      },
      "NewResource": {
        "title": "Create resource payload",
        "description": "Properties to create a resource",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "resource_type_id"
        ],
        "properties": {
          "color": {
            "$ref": "#/components/schemas/ColorInput"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "The name of this resource. For humans, use first and last name instead. Required for other types of resources",
            "example": "John Doe"
          },
          "timezone": {
            "$ref": "#/components/schemas/Timezone"
          },
          "job_title": {
            "$ref": "#/components/schemas/Resource/properties/job_title"
          },
          "phone": {
            "description": "The phone number of this resource (human resources only).",
            "nullable": true,
            "type": "string",
            "maxLength": 255
          },
          "bookable": {
            "$ref": "#/components/schemas/Resource/properties/bookable"
          },
          "notes": {
            "$ref": "#/components/schemas/Resource/properties/notes"
          },
          "first_name": {
            "type": "string",
            "maxLength": 255,
            "description": "The first name of a human resource"
          },
          "last_name": {
            "type": "string",
            "maxLength": 255,
            "description": "The last name of a human resource"
          },
          "capacity": {
            "$ref": "#/components/schemas/Resource/properties/custom_attributes/properties/capacity"
          },
          "registration_number": {
            "$ref": "#/components/schemas/Resource/properties/custom_attributes/properties/registration_number"
          },
          "custom_field_option_ids": {
            "description": "The custom fields selected for the resource",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceType/properties/custom_fields/items/properties/id"
            }
          },
          "invite": {
            "description": "If true and if the resource email is valid, send an invitation email to this resource",
            "nullable": true,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "resource_type_id": {
            "$ref": "#/components/schemas/ResourceType/properties/id"
          }
        }
      },
      "UpdateResource": {
        "title": "Update resource payload",
        "description": "Properties to update a resource",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "archived": {
            "$ref": "#/components/schemas/Resource/properties/archived"
          },
          "color": {
            "$ref": "#/components/schemas/ColorInput"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "The name of this resource. For humans, use first and last name instead. Required for other types of resources",
            "example": "John Doe"
          },
          "timezone": {
            "$ref": "#/components/schemas/Timezone"
          },
          "job_title": {
            "$ref": "#/components/schemas/Resource/properties/job_title"
          },
          "phone": {
            "description": "The phone number of this resource (human resources only).",
            "nullable": true,
            "type": "string",
            "maxLength": 255
          },
          "bookable": {
            "$ref": "#/components/schemas/Resource/properties/bookable"
          },
          "notes": {
            "$ref": "#/components/schemas/Resource/properties/notes"
          },
          "first_name": {
            "type": "string",
            "maxLength": 255,
            "description": "The first name of a human resource"
          },
          "last_name": {
            "type": "string",
            "maxLength": 255,
            "description": "The last name of a human resource"
          },
          "capacity": {
            "$ref": "#/components/schemas/Resource/properties/custom_attributes/properties/capacity"
          },
          "registration_number": {
            "$ref": "#/components/schemas/Resource/properties/custom_attributes/properties/registration_number"
          },
          "custom_field_option_ids": {
            "description": "The custom fields selected for the resource",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceType/properties/custom_fields/items/properties/id"
            }
          }
        }
      },
      "Resource": {
        "title": "Resource details response",
        "description": "Response representing a resource and its associated entities.",
        "type": "object",
        "additionalProperties": false,
        "required": [],
        "properties": {
          "account": {
            "description": "The account this resource belongs to.",
            "type": "object",
            "additionalProperties": false,
            "required": [
              "id",
              "name",
              "url"
            ],
            "properties": {
              "id": {
                "$ref": "#/components/schemas/Account/properties/id"
              },
              "name": {
                "$ref": "#/components/schemas/Account/properties/name"
              },
              "url": {
                "$ref": "#/components/schemas/AccountSummary/properties/url"
              }
            }
          },
          "archived": {
            "description": "If `true`, then this resource is archived.",
            "type": "boolean"
          },
          "available_periods": {
            "description": "Represents the block of time per weekday when the resource is available. The set of availability where `valid_until` is `null` is the currently active set of available periods.",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "start_time",
                "end_time",
                "valid_from",
                "valid_until",
                "week_day"
              ],
              "properties": {
                "start_time": {
                  "$ref": "#/components/schemas/MinuteTime"
                },
                "end_time": {
                  "$ref": "#/components/schemas/MinuteTime"
                },
                "valid_from": {
                  "$ref": "#/components/schemas/ISODateString"
                },
                "valid_until": {
                  "$ref": "#/components/schemas/NullableISODateString"
                },
                "week_day": {
                  "$ref": "#/components/schemas/WeekDay"
                }
              }
            }
          },
          "bookable": {
            "description": "Indicates whether this resource is bookable.",
            "type": "boolean"
          },
          "booked_client_ids": {
            "description": "A unique list of clients ids this resource has been booked for.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Client/properties/id"
            }
          },
          "booked_project_ids": {
            "description": "A unique list of project ids this resource has been booked for.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project/properties/id"
            }
          },
          "color": {
            "nullable": true,
            "description": "A color encoded in a hex triplet (6 hexadecimal numbers) starting with a hash (#)",
            "type": "string",
            "pattern": "^#[a-fA-F0-9]{6}$",
            "example": "#c0ffee"
          },
          "created_at": {
            "description": "The date and time when this resource was created.",
            "example": "2020-12-31T14:29:29.000Z",
            "type": "string",
            "format": "iso-date-time-string"
          },
          "custom_attributes": {
            "type": "object",
            "additionalProperties": false,
            "description": "Extra attributes assigned to the resource. These vary depending on the resource type.",
            "properties": {
              "phone": {
                "nullable": true,
                "type": "string",
                "maxLength": 255,
                "description": "The phone number of a 'Person' resource."
              },
              "capacity": {
                "nullable": true,
                "type": "string",
                "pattern": "^\\d*$",
                "example": "42",
                "description": "The capacity of a 'Meeting room' resource."
              },
              "registration_number": {
                "nullable": true,
                "type": "string",
                "maxLength": 255,
                "description": "The registration number of a 'Vehicle' resource."
              }
            }
          },
          "creator_id": {
            "description": "The unique identifier of the user this resource was created by.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "custom_available_periods": {
            "description": "A list of custom available period for this resource.",
            "type": "array",
            "items": {
              "description": "Represents a period of custom availability. Custom available periods take precedence over normal available periods.",
              "type": "object",
              "additionalProperties": false,
              "required": [
                "date",
                "start_time",
                "end_time"
              ],
              "properties": {
                "date": {
                  "$ref": "#/components/schemas/ISODateString"
                },
                "start_time": {
                  "$ref": "#/components/schemas/MinuteTime"
                },
                "end_time": {
                  "$ref": "#/components/schemas/MinuteTime"
                }
              }
            }
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "human": {
            "description": "Whether this resource is human.",
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of the resource.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "image": {
            "description": "The image url of this resource.",
            "type": "string",
            "example": "https://resourceguru.s3.amazonaws.com/images/example.png"
          },
          "images": {
            "description": "An object containing different image sizes for a resource.",
            "type": "object",
            "required": [
              "card",
              "default",
              "header",
              "thumb",
              "tiny"
            ],
            "properties": {
              "card": {
                "$ref": "#/components/schemas/Url"
              },
              "default": {
                "$ref": "#/components/schemas/Url"
              },
              "header": {
                "$ref": "#/components/schemas/Url"
              },
              "thumb": {
                "$ref": "#/components/schemas/Url"
              },
              "tiny": {
                "$ref": "#/components/schemas/Url"
              }
            }
          },
          "job_title": {
            "nullable": true,
            "type": "string",
            "maxLength": 255,
            "description": "Job title of this Resource. Only applicable to Resources linked to User Accounts.",
            "example": "General Manager"
          },
          "last_updated_by": {
            "nullable": true,
            "description": "The unique identifier of the user that last updated this resource.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "minutes_per_day": {
            "type": "integer",
            "minimum": 1,
            "maximum": 1440,
            "description": "The number of minutes per day this resource is available for.",
            "example": 60
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "The resource's name.",
            "example": "John Doe"
          },
          "notes": {
            "type": "string",
            "maxLength": 65535,
            "description": "Notes on the resource."
          },
          "overtimes": {
            "description": "A list of overtime periods for this resource.",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "created_at",
                "creator_id",
                "date",
                "duration",
                "id",
                "resource_instance_id",
                "updated_at"
              ],
              "properties": {
                "created_at": {
                  "description": "The date and time this overtime was created at.",
                  "example": "2020-12-31T14:29:29.000Z",
                  "type": "string",
                  "format": "iso-date-time-string"
                },
                "creator_id": {
                  "description": "The unique identifier of the user this overtime was created by.",
                  "type": "integer",
                  "minimum": 1,
                  "example": 1
                },
                "date": {
                  "description": "The date this overtime is booked on.",
                  "example": "2020-12-31",
                  "type": "string",
                  "format": "iso-date-string"
                },
                "duration": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1440,
                  "description": "The duration in minutes this overtime is booked for.",
                  "example": 60
                },
                "id": {
                  "description": "The unique identifier of this overtime.",
                  "type": "integer",
                  "minimum": 1,
                  "example": 1
                },
                "resource_id": {
                  "description": "The unique identifier of the resource this overtime is booked for.",
                  "type": "integer",
                  "minimum": 1,
                  "example": 1
                },
                "updated_at": {
                  "description": "The date and time this overtime was last updated (or created at)",
                  "example": "2020-12-31T14:29:29.000Z",
                  "type": "string",
                  "format": "iso-date-time-string"
                }
              }
            }
          },
          "phone": {
            "nullable": true,
            "type": "string",
            "maxLength": 255,
            "description": "The phone number of this resource (human resources only)."
          },
          "resource_type": {
            "description": "The type of this resource",
            "additionalProperties": false,
            "required": [
              "id",
              "name",
              "url"
            ],
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/ResourceType/properties/id"
              },
              "name": {
                "type": "string",
                "maxLength": 255,
                "description": "The name of this resource type.",
                "example": "Project"
              },
              "url": {
                "description": "The URL to view this resource type in the API.",
                "type": "string",
                "example": "https://api.resourceguruapp.com/v1/example-corp/resource_types/1"
              }
            }
          },
          "selected_custom_field_options": {
            "description": "Describe the selected values of the custom field(s). These are only returned if a value exists for the custom field.",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "id",
                "name",
                "value"
              ],
              "properties": {
                "id": {
                  "description": "The unique identifier of the custom field option",
                  "type": "integer",
                  "minimum": 1,
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "maxLength": 255,
                  "description": "The name of this custom field"
                },
                "value": {
                  "type": "string",
                  "maxLength": 255,
                  "description": "The option or value selected for this custom field"
                }
              }
            }
          },
          "timezone": {
            "additionalProperties": false,
            "required": [
              "name",
              "offset"
            ],
            "type": "object",
            "properties": {
              "name": {
                "$ref": "#/components/schemas/Timezone"
              },
              "offset": {
                "description": "The offset to UTC, in minutes",
                "type": "integer",
                "minimum": -1440,
                "maximum": 1440,
                "example": -480
              }
            }
          },
          "updated_at": {
            "description": "The date and time this resource was last updated (or created at)",
            "example": "2020-12-31T14:29:29.000Z",
            "type": "string",
            "format": "iso-date-time-string"
          },
          "url": {
            "description": "The URL to view this resource in the API.",
            "type": "string",
            "example": "https://api.resourceguruapp.com/v1/example-corp/resources/1"
          },
          "user_id": {
            "$ref": "#/components/schemas/NullableEntityId"
          },
          "vacation_allowance": {
            "deprecated": true,
            "type": "integer",
            "minimum": 0,
            "default": 20
          }
        }
      },
      "Resources": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Resource"
        }
      },
      "ResourceSummary": {
        "title": "Resource summary response",
        "description": "Response representing a summary of a resource",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "color",
          "created_at",
          "creator_id",
          "id",
          "last_updated_by",
          "name",
          "resource_type",
          "timezone",
          "type",
          "updated_at",
          "url"
        ],
        "properties": {
          "color": {
            "$ref": "#/components/schemas/Resource/properties/color"
          },
          "created_at": {
            "$ref": "#/components/schemas/Resource/properties/created_at"
          },
          "creator_id": {
            "$ref": "#/components/schemas/Resource/properties/creator_id"
          },
          "id": {
            "$ref": "#/components/schemas/Resource/properties/id"
          },
          "last_updated_by": {
            "$ref": "#/components/schemas/Resource/properties/last_updated_by"
          },
          "name": {
            "$ref": "#/components/schemas/Resource/properties/name"
          },
          "resource_type": {
            "$ref": "#/components/schemas/Resource/properties/resource_type"
          },
          "timezone": {
            "$ref": "#/components/schemas/Resource/properties/timezone"
          },
          "type": {
            "description": "The type of this resource - will be the job title for human resources with one, otherwise the resource_type",
            "type": "string"
          },
          "updated_at": {
            "$ref": "#/components/schemas/Resource/properties/updated_at"
          },
          "url": {
            "$ref": "#/components/schemas/Resource/properties/url"
          }
        }
      },
      "ResourceSummaries": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ResourceSummary"
        }
      },
      "NewAvailability": {
        "title": "New availability",
        "description": "Used to change the normal weekly availability and/or timezone of a resource",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "date"
        ],
        "properties": {
          "date": {
            "$ref": "#/components/schemas/Downtime/properties/from"
          },
          "timezone": {
            "description": "A timezone (based off of Ruby on Rails's ActiveSupport::TimeZone key mappings). See [Timezones](#section/Data-types/Timezones) for a list of valid timezones.",
            "type": "string",
            "example": "UTC",
            "default": null
          },
          "delete_invalid_bookings": {
            "description": "If `true`, any bookings that clash with the downtime will be deleted.",
            "type": "boolean",
            "default": false
          },
          "allow_waiting": {
            "description": "If `true`, move any conflicting bookings to the waiting list. This is the default behaviour unless overridden by `block_by_clashes` or `delete_invalid_bookings`.",
            "type": "boolean",
            "default": true,
            "deprecated": true
          },
          "available_periods": {
            "description": "Represents the periods at which the resource is available",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "start_time",
                "end_time",
                "week_day"
              ],
              "properties": {
                "start_time": {
                  "$ref": "#/components/schemas/MinuteTime"
                },
                "end_time": {
                  "$ref": "#/components/schemas/MinuteTime"
                },
                "week_day": {
                  "$ref": "#/components/schemas/WeekDay"
                }
              }
            }
          }
        }
      },
      "AvailabilityClash": {
        "title": "Availability clash response",
        "description": "A response object returned when changing availability would result in clashing bookings",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "clashes"
        ],
        "properties": {
          "clashes": {
            "description": "An array of booking durations that clash",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "id",
                "repeat_booking_id",
                "date"
              ],
              "properties": {
                "id": {
                  "description": "The unique identifier of the booking duration",
                  "type": "integer",
                  "minimum": 1,
                  "example": 1
                },
                "repeat_booking_id": {
                  "description": "The unique identifier of the booking that this booking duration belongs to",
                  "type": "integer",
                  "minimum": 1,
                  "example": 1
                },
                "date": {
                  "$ref": "#/components/schemas/ISODateString"
                },
                "resource_id": {
                  "description": "The resource id associated with the booking",
                  "type": "integer",
                  "minimum": 1,
                  "example": 1
                }
              }
            }
          }
        }
      },
      "User": {
        "title": "User response",
        "description": "Response representing a single user",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "first_name",
          "last_name",
          "email",
          "image",
          "timezone",
          "last_login_at",
          "last_logout_at",
          "last_activity_at",
          "created_at",
          "updated_at",
          "last_product_update_read_at"
        ],
        "properties": {
          "id": {
            "description": "User unique identifier",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "first_name": {
            "type": "string",
            "maxLength": 255,
            "description": "The first name of the user",
            "example": "Joe"
          },
          "last_name": {
            "type": "string",
            "maxLength": 255,
            "description": "The last name of the user",
            "example": "Bloggs"
          },
          "email": {
            "type": "string",
            "maxLength": 255,
            "example": "email@resourceguruapp.com",
            "description": "The email of the user"
          },
          "image": {
            "description": "The profile image url of the account owner",
            "type": "string",
            "example": "https://resourceguru.s3.amazonaws.com/images/example.png"
          },
          "images": {
            "description": "An object containing different image sizes for a user",
            "type": "object",
            "required": [
              "card",
              "default",
              "header",
              "thumb",
              "tiny"
            ],
            "properties": {
              "card": {
                "$ref": "#/components/schemas/Url"
              },
              "default": {
                "$ref": "#/components/schemas/Url"
              },
              "header": {
                "$ref": "#/components/schemas/Url"
              },
              "thumb": {
                "$ref": "#/components/schemas/Url"
              },
              "tiny": {
                "$ref": "#/components/schemas/Url"
              }
            }
          },
          "timezone": {
            "description": "The timezone the user is in.",
            "type": "string",
            "example": "UTC"
          },
          "last_login_at": {
            "nullable": true,
            "description": "The date and time this user last logged in.",
            "example": "2020-12-31",
            "type": "string",
            "format": "iso-date-string"
          },
          "last_logout_at": {
            "nullable": true,
            "description": "The date and time this user last logged out.",
            "example": "2020-12-31",
            "type": "string",
            "format": "iso-date-string"
          },
          "last_activity_at": {
            "nullable": true,
            "description": "The date and time this user was last active on the platform.",
            "example": "2020-12-31",
            "type": "string",
            "format": "iso-date-string"
          },
          "activation_state": {
            "type": "string",
            "maxLength": 255,
            "description": "The current activation state for this user.",
            "enum": [
              "pending",
              "active",
              "expired"
            ],
            "example": "active"
          },
          "created_at": {
            "description": "The date and time this user was created at.",
            "example": "2020-12-31T14:29:29.000Z",
            "type": "string",
            "format": "iso-date-time-string"
          },
          "updated_at": {
            "description": "The date and time this user was updated at.",
            "example": "2020-12-31T14:29:29.000Z",
            "type": "string",
            "format": "iso-date-time-string"
          },
          "last_product_update_read_at": {
            "nullable": true,
            "description": "The dater and time the user last read a product update.",
            "example": "2020-12-31",
            "type": "string",
            "format": "iso-date-string"
          },
          "permissions": {
            "description": "Permissions defines the global access rights for a user.",
            "type": "string",
            "enum": [
              "basic_user",
              "manager",
              "administrator",
              "custom"
            ],
            "example": "administrator"
          },
          "downtime_rights": {
            "$ref": "#/components/schemas/UserRights"
          },
          "client_rights": {
            "$ref": "#/components/schemas/UserRights"
          },
          "project_rights": {
            "$ref": "#/components/schemas/UserRights"
          },
          "resource_rights": {
            "$ref": "#/components/schemas/UserRights"
          },
          "report_rights": {
            "$ref": "#/components/schemas/UserRights"
          },
          "owner": {
            "description": "If true, the current account is owned by the authenticated user.",
            "type": "boolean"
          },
          "deleted": {
            "description": "If true, the user is deleted.",
            "type": "boolean"
          },
          "notices": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "dismissed_custom_availability"
            ],
            "properties": {
              "dismissed_custom_availability": {
                "description": "If true, the custom availability onboarding notice has been dismissed. Only returned for the /me endpoint.",
                "type": "boolean"
              }
            }
          }
        }
      },
      "Users": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/User"
        }
      },
      "Webhook": {
        "title": "A webhook",
        "description": "A URL and list of resources that should be posted to that url on modification",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "account_id",
          "name",
          "payload_url",
          "events",
          "secret",
          "send_secret_header",
          "status",
          "paused",
          "user_id",
          "created_at",
          "updated_at",
          "url"
        ],
        "properties": {
          "id": {
            "description": "The unique identifier of this webhook",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "account_id": {
            "description": "The unique identifier of the account that this webhook is for",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "description": "The name of this webhook for display purposes"
          },
          "payload_url": {
            "description": "The url that we will send relevant events to",
            "type": "string",
            "example": "https://resourceguru.s3.amazonaws.com/images/example.png",
            "minLength": 1,
            "maxLength": 255
          },
          "events": {
            "description": "The events that will be sent to this webhook",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "bookings",
                "downtimes",
                "resources",
                "projects",
                "clients",
                "accounts",
                "resource_types"
              ]
            }
          },
          "secret": {
            "type": "string",
            "maxLength": 255,
            "description": "An optional secret used to create a SH256 HMAC which will be sent along with all webhook payloads for verification"
          },
          "send_secret_header": {
            "description": "Whether we send the secret in a header to the payload URL along with our events",
            "type": "boolean"
          },
          "status": {
            "description": "The status of the webhook, based on our latest event delivery attempt",
            "type": "string",
            "enum": [
              "ready",
              "success",
              "retrying",
              "failed"
            ]
          },
          "paused": {
            "description": "Whether this webhook is paused, preventing delivery of events",
            "type": "boolean"
          },
          "user_id": {
            "description": "The unique identifier of the user that created this webhook",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "created_at": {
            "$ref": "#/components/schemas/ISODateTimeString"
          },
          "updated_at": {
            "$ref": "#/components/schemas/ISODateTimeString"
          },
          "url": {
            "description": "The url for this resource",
            "type": "string",
            "example": "https://resourceguru.s3.amazonaws.com/images/example.png"
          }
        }
      },
      "Webhooks": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Webhook"
        }
      },
      "WebhookTestPayloadUrlResponse": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "received"
        ],
        "properties": {
          "received": {
            "type": "boolean",
            "enum": [
              true
            ]
          }
        }
      },
      "WebhookBooking": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "client_id",
          "project_id",
          "resource_id",
          "notes",
          "details",
          "start_date",
          "end_date",
          "billable",
          "refreshable",
          "created_at",
          "updated_at",
          "last_updated_by",
          "booker",
          "durations",
          "rrule",
          "group_id",
          "action",
          "type"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "client_id": {
            "$ref": "#/components/schemas/NullableEntityId"
          },
          "project_id": {
            "$ref": "#/components/schemas/NullableEntityId"
          },
          "resource_id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "notes": {
            "$ref": "#/components/schemas/LongString"
          },
          "details": {
            "$ref": "#/components/schemas/LongString"
          },
          "start_date": {
            "$ref": "#/components/schemas/ISODateString"
          },
          "end_date": {
            "$ref": "#/components/schemas/ISODateString"
          },
          "billable": {
            "type": "boolean"
          },
          "refreshable": {
            "type": "boolean"
          },
          "created_at": {
            "$ref": "#/components/schemas/ISODateTimeString"
          },
          "updated_at": {
            "$ref": "#/components/schemas/ISODateTimeString"
          },
          "last_updated_by": {
            "$ref": "#/components/schemas/EntityId"
          },
          "booker": {
            "required": [
              "id",
              "name",
              "email"
            ],
            "additionalProperties": false,
            "properties": {
              "id": {
                "$ref": "#/components/schemas/EntityId"
              },
              "name": {
                "$ref": "#/components/schemas/ShortString"
              },
              "email": {
                "$ref": "#/components/schemas/ShortString"
              }
            }
          },
          "durations": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "date",
                "duration",
                "start_time",
                "end_time",
                "waiting"
              ],
              "additionalProperties": false,
              "properties": {
                "date": {
                  "$ref": "#/components/schemas/ISODateString"
                },
                "duration": {
                  "$ref": "#/components/schemas/MinuteDuration"
                },
                "start_time": {
                  "$ref": "#/components/schemas/NullableMinuteTime"
                },
                "end_time": {
                  "$ref": "#/components/schemas/NullableMinuteTime"
                },
                "waiting": {
                  "type": "boolean"
                }
              }
            }
          },
          "client": {
            "nullable": true,
            "type": "object",
            "required": [
              "id",
              "name",
              "color"
            ],
            "additionalProperties": false,
            "properties": {
              "id": {
                "$ref": "#/components/schemas/EntityId"
              },
              "name": {
                "$ref": "#/components/schemas/ShortString"
              },
              "color": {
                "$ref": "#/components/schemas/Color"
              }
            }
          },
          "project": {
            "nullable": true,
            "type": "object",
            "required": [
              "id",
              "name",
              "color",
              "project_code"
            ],
            "additionalProperties": false,
            "properties": {
              "id": {
                "$ref": "#/components/schemas/EntityId"
              },
              "name": {
                "$ref": "#/components/schemas/ShortString"
              },
              "color": {
                "$ref": "#/components/schemas/Color"
              },
              "project_code": {
                "$ref": "#/components/schemas/ShortString"
              }
            }
          },
          "resource": {
            "type": "object",
            "required": [
              "id",
              "name",
              "color",
              "email"
            ],
            "additionalProperties": false,
            "properties": {
              "id": {
                "$ref": "#/components/schemas/EntityId"
              },
              "name": {
                "$ref": "#/components/schemas/ShortString"
              },
              "color": {
                "$ref": "#/components/schemas/Color"
              },
              "email": {
                "$ref": "#/components/schemas/ShortString"
              }
            }
          },
          "action": {
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "create"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "update"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "delete"
                ]
              }
            ]
          },
          "group_id": {
            "$ref": "#/components/schemas/NullableEntityId"
          },
          "rrule": {
            "$ref": "#/components/schemas/RRule"
          },
          "affects": {
            "$ref": "#/components/schemas/Affects"
          },
          "type": {
            "type": "string",
            "enum": [
              "booking"
            ]
          }
        }
      },
      "WebhookDowntime": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "from",
          "to",
          "timezone",
          "start_time",
          "end_time",
          "downtime_type_id",
          "details",
          "state",
          "creator_id",
          "booker_id",
          "leave",
          "resource_ids",
          "updated_at",
          "booker",
          "resources",
          "downtime_type",
          "action",
          "type"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "from": {
            "$ref": "#/components/schemas/ISODateString"
          },
          "to": {
            "$ref": "#/components/schemas/ISODateString"
          },
          "timezone": {
            "$ref": "#/components/schemas/Downtime/properties/timezone"
          },
          "start_time": {
            "$ref": "#/components/schemas/MinuteTime"
          },
          "end_time": {
            "$ref": "#/components/schemas/MinuteTime"
          },
          "downtime_type_id": {
            "$ref": "#/components/schemas/NullableEntityId"
          },
          "downtime_type": {
            "nullable": true,
            "$ref": "#/components/schemas/ShortString"
          },
          "details": {
            "$ref": "#/components/schemas/LongString"
          },
          "state": {
            "type": "string",
            "enum": [
              "Approved"
            ]
          },
          "creator_id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "booker_id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "leave": {
            "type": "null"
          },
          "resource_ids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityId"
            }
          },
          "updated_at": {
            "$ref": "#/components/schemas/ISODateTimeString"
          },
          "booker": {
            "type": "object",
            "required": [
              "id",
              "name",
              "email"
            ],
            "additionalProperties": false,
            "properties": {
              "id": {
                "$ref": "#/components/schemas/EntityId"
              },
              "name": {
                "$ref": "#/components/schemas/ShortString"
              },
              "email": {
                "$ref": "#/components/schemas/ShortString"
              }
            }
          },
          "resources": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "id",
                "name",
                "email",
                "color"
              ],
              "properties": {
                "id": {
                  "$ref": "#/components/schemas/EntityId"
                },
                "name": {
                  "$ref": "#/components/schemas/ShortString"
                },
                "color": {
                  "$ref": "#/components/schemas/Color"
                },
                "email": {
                  "$ref": "#/components/schemas/NullableEmail"
                }
              }
            }
          },
          "action": {
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "create"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "update"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "delete"
                ]
              }
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "downtime"
            ]
          }
        }
      },
      "WebhookPayload": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "account_id",
          "webhook_id",
          "model",
          "action",
          "user",
          "attempts",
          "status",
          "created_at",
          "last_sent_on",
          "request_headers",
          "response_from_http_client",
          "next_try"
        ],
        "properties": {
          "id": {
            "description": "The unique identifier of the payload.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "account_id": {
            "description": "The unique identifier of the account the payload belongs to.",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "webhook_id": {
            "description": "The unique identifier of the webhook that this payload was sent to",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "model": {
            "description": "The model that the action was performed on.",
            "type": "object"
          },
          "action": {
            "description": "The action that took place.",
            "type": "string",
            "enum": [
              "create",
              "update",
              "delete"
            ]
          },
          "user": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "id",
              "name",
              "email"
            ],
            "properties": {
              "id": {
                "$ref": "#/components/schemas/User/properties/id"
              },
              "name": {
                "type": "string"
              },
              "email": {
                "$ref": "#/components/schemas/User/properties/email"
              }
            }
          },
          "attempts": {
            "description": "The number of times we have attempted delivery of the payload.",
            "type": "integer"
          },
          "status": {
            "description": "The delivery state that the payload is currently in.\n\nStatus | Description\n---    | ---\npending   | No attempt has been made to send the payload yet.\ndelivered | The payload has been successfully delivered (The remote server responded with 2XX).\nfailing   | The attempt to send the payload has failed. (The remote server timed out or responded with non-2XX)\nfailed    | The payload delivery has failed 100 times and will not automatically try again.",
            "type": "string",
            "enum": [
              "pending",
              "delivered",
              "failing",
              "failed"
            ]
          },
          "created_at": {
            "description": "The date and time this payload was created.",
            "example": "2020-12-31T14:29:29.000Z",
            "type": "string",
            "format": "iso-date-time-string"
          },
          "last_sent_on": {
            "description": "The date and time this payload was last sent, or null if it hasn't been sent yet.",
            "nullable": true,
            "$ref": "#/components/schemas/ISODateTimeString"
          },
          "request_headers": {
            "description": "The request headers that were sent.",
            "nullable": true,
            "type": "object"
          },
          "response_from_http_client": {
            "description": "The response code received.",
            "example": 200,
            "nullable": true,
            "type": "integer"
          },
          "next_try": {
            "nullable": true,
            "description": "The date and time we will next attempt to send the payload, null if no further attempt is scheduled.",
            "example": "2020-12-31",
            "type": "string",
            "format": "iso-date-string"
          }
        }
      },
      "WebhookSendPayloadBatch": {
        "title": "A send_payload_batch request",
        "description": "Contains the unique identifier of the payload that we want to re-send",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EntityId"
          }
        }
      },
      "WebhookTestPayloadUrl": {
        "title": "A test-payload-url request",
        "description": "a URL that we want to send a webhook test payload to",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "payload_url"
        ],
        "properties": {
          "payload_url": {
            "type": "string",
            "minLength": 1,
            "format": "uri"
          }
        }
      },
      "UpdateWebhook": {
        "title": "An update webhook request",
        "description": "The request body for updating a webhook",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Webhook/properties/name"
          },
          "payload_url": {
            "$ref": "#/components/schemas/Webhook/properties/payload_url"
          },
          "events": {
            "$ref": "#/components/schemas/Webhook/properties/events"
          },
          "secret": {
            "$ref": "#/components/schemas/Webhook/properties/secret"
          },
          "send_secret_header": {
            "$ref": "#/components/schemas/Webhook/properties/send_secret_header"
          },
          "paused": {
            "$ref": "#/components/schemas/Webhook/properties/paused"
          },
          "retry_last": {
            "type": "boolean",
            "description": "Whether to attempt resending the last payload after updating",
            "default": false
          }
        }
      },
      "NewWebhook": {
        "title": "A new webhook request",
        "description": "The request body for creating a new webhook",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "payload_url",
          "events",
          "secret",
          "send_secret_header",
          "paused"
        ],
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Webhook/properties/name"
          },
          "payload_url": {
            "$ref": "#/components/schemas/Webhook/properties/payload_url"
          },
          "events": {
            "$ref": "#/components/schemas/Webhook/properties/events"
          },
          "secret": {
            "$ref": "#/components/schemas/Webhook/properties/secret"
          },
          "send_secret_header": {
            "$ref": "#/components/schemas/Webhook/properties/send_secret_header"
          },
          "paused": {
            "$ref": "#/components/schemas/Webhook/properties/paused"
          }
        }
      },
      "GeneralError": {
        "type": "object",
        "required": [
          "errors"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the property that this error applies to (typically returned if this is a validation error)"
                },
                "date": {
                  "description": "The date and time that this error occurred",
                  "example": "2020-12-31T14:29:29.000Z",
                  "type": "string",
                  "format": "iso-date-time-string"
                },
                "code": {
                  "type": "integer",
                  "description": "The error code"
                },
                "message": {
                  "type": "string",
                  "description": "A friendly message describing the error in more detail"
                }
              }
            }
          }
        }
      },
      "EntityId": {
        "description": "A unique identifier for an entity.",
        "type": "integer",
        "minimum": 1,
        "example": 1
      },
      "QueryEntityId": {
        "type": "string",
        "pattern": "^[1-9]\\d*$",
        "example": "42"
      },
      "NullableEntityId": {
        "nullable": true,
        "description": "A unique identifier for an entity.",
        "type": "integer",
        "minimum": 1,
        "example": 1
      },
      "ISODateString": {
        "description": "An ISO 8601 date",
        "example": "2020-12-31",
        "type": "string",
        "format": "iso-date-string"
      },
      "NullableISODateString": {
        "nullable": true,
        "$ref": "#/components/schemas/ISODateString"
      },
      "ISODateTimeString": {
        "description": "An ISO 8601 datetime",
        "example": "2020-12-31T14:29:29.000Z",
        "type": "string",
        "format": "iso-date-time-string"
      },
      "NullableISODateTimeString": {
        "nullable": true,
        "$ref": "#/components/schemas/ISODateTimeString"
      },
      "MinuteTime": {
        "description": "A time represented by the number of minutes elapsed since midnight",
        "type": "integer",
        "minimum": 0,
        "maximum": 1440,
        "example": 540
      },
      "MinuteDuration": {
        "type": "integer",
        "minimum": 1,
        "maximum": 1440,
        "description": "A duration in minutes",
        "example": 60
      },
      "NullableMinuteTime": {
        "nullable": true,
        "description": "A time represented by the number of minutes elapsed since midnight",
        "type": "integer",
        "minimum": 0,
        "maximum": 1440,
        "example": 540
      },
      "Email": {
        "type": "string",
        "maxLength": 255,
        "example": "email@resourceguruapp.com"
      },
      "NullableEmail": {
        "nullable": true,
        "$ref": "#/components/schemas/Email"
      },
      "Color": {
        "description": "A color encoded in a hex triplet (6 hexadecimal numbers) starting with a hash (#)",
        "type": "string",
        "pattern": "^#[a-fA-F0-9]{6}$",
        "example": "#c0ffee"
      },
      "ColorInput": {
        "description": "A color encoded in a hex triplet (6 hexadecimal numbers)",
        "example": "c0ffee",
        "nullable": true,
        "type": "string",
        "pattern": "^#?[a-fA-F0-9]{6}$"
      },
      "NullableColor": {
        "nullable": true,
        "$ref": "#/components/schemas/Color"
      },
      "NotBlankShortString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255
      },
      "ShortString": {
        "type": "string",
        "maxLength": 255
      },
      "NullableShortString": {
        "nullable": true,
        "$ref": "#/components/schemas/ShortString"
      },
      "NotBlankLongString": {
        "type": "string",
        "maxLength": 65535,
        "minLength": 1
      },
      "LongString": {
        "type": "string",
        "maxLength": 65535
      },
      "NullableLongString": {
        "nullable": true,
        "type": "string",
        "maxLength": 65535
      },
      "Period": {
        "description": "An interval of time within a day represented by a start and an end time",
        "type": "object",
        "properties": {
          "start_time": {
            "$ref": "#/components/schemas/MinuteTime"
          },
          "end_time": {
            "$ref": "#/components/schemas/MinuteTime"
          }
        }
      },
      "WeekDay": {
        "description": "The day of the week where Sunday is 0 and Saturday is 6",
        "type": "integer",
        "minimum": 0,
        "maximum": 6
      },
      "Affects": {
        "type": "string",
        "enum": [
          "all",
          "following",
          "single"
        ]
      },
      "Timezone": {
        "description": "A timezone (based off of Ruby on Rails's ActiveSupport::TimeZone key mappings). See [Timezones](#section/Data-types/Timezones) for a list of valid timezones.",
        "type": "string",
        "example": "UTC"
      },
      "NullableTimezone": {
        "nullable": true,
        "$ref": "#/components/schemas/Timezone"
      },
      "UserRights": {
        "description": "The access level to a type of entity",
        "type": "string",
        "enum": [
          "manage_all",
          "manage_own",
          "view",
          "none"
        ]
      },
      "Url": {
        "description": "An absolute or relative url",
        "type": "string",
        "example": "https://resourceguru.s3.amazonaws.com/images/example.png"
      },
      "NotBlankUrl": {
        "description": "An absolute or relative url",
        "type": "string",
        "example": "https://resourceguru.s3.amazonaws.com/images/example.png",
        "minLength": 1,
        "maxLength": 255
      },
      "DateRange": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "start",
          "end"
        ],
        "properties": {
          "start": {
            "$ref": "#/components/schemas/ISODateString"
          },
          "end": {
            "$ref": "#/components/schemas/ISODateString"
          }
        }
      }
    },
    "parameters": {
      "account": {
        "in": "path",
        "name": "account",
        "required": true,
        "description": "The Account URL ID for your account - can be seen in the URL bar when using the application in a browser.",
        "example": "example-corp",
        "schema": {
          "type": "string",
          "minLength": 1
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "The maximum number of results to return.",
        "schema": {
          "type": "string",
          "pattern": "^\\d+$",
          "example": "50",
          "default": null
        }
      },
      "limitWithDefault": {
        "name": "limit",
        "in": "query",
        "description": "The maximum number of results to return. Use `limit=0` to remove the limit.",
        "schema": {
          "type": "string",
          "pattern": "^\\d+$",
          "example": "50",
          "default": "50"
        }
      },
      "offset": {
        "name": "offset",
        "in": "query",
        "description": "The number of results to skip over. Useful for pagination.",
        "schema": {
          "type": "string",
          "pattern": "^\\d+$",
          "example": "10",
          "default": "0"
        }
      },
      "affects": {
        "in": "query",
        "name": "affects",
        "description": "Specify how the operation affects other occurrences of a repeat booking.",
        "schema": {
          "$ref": "#/components/schemas/Affects"
        }
      },
      "booking_start_date": {
        "name": "start_date",
        "in": "query",
        "description": "Include only bookings starting on or after this date.",
        "schema": {
          "$ref": "#/components/schemas/ISODateString"
        },
        "example": "2020-01-01"
      },
      "booking_end_date": {
        "name": "end_date",
        "in": "query",
        "description": "Include only bookings ending on or before this date.",
        "schema": {
          "$ref": "#/components/schemas/ISODateString"
        },
        "example": "2021-12-31"
      },
      "reportable_id": {
        "in": "path",
        "name": "id",
        "required": true,
        "description": "The unique identifier of the entity we would like to report on, or 0 for a report on all bookings not associated to an entity.",
        "schema": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/EntityId"
            },
            {
              "type": "integer",
              "enum": [
                0
              ]
            }
          ]
        }
      }
    },
    "responses": {
      "GeneralError": {
        "description": "An error occurred while processing the request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeneralError"
            }
          }
        }
      },
      "GeneralErrorPlain": {
        "description": "An error occurred while processing the request"
      },
      "ValidationError": {
        "description": "An error occurred during request validation",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeneralError"
            }
          }
        }
      },
      "EntityNotFound": {
        "description": "The entity was not found"
      },
      "InsufficientPermissionsPlain": {
        "description": "You do not have the necessary permissions to perform this operation"
      },
      "InsufficientPermissions": {
        "description": "You do not have the necessary permissions to perform this operation",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeneralError"
            }
          }
        }
      },
      "BookingClash": {
        "description": "A response indicating there was a booking clash.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BookingClashResponse"
            }
          }
        }
      },
      "DowntimeClash": {
        "description": "Response returned when updating or creating a downtime would create a clash due to the resource not having enough availability.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DowntimeClashResponse"
            }
          }
        }
      },
      "AvailabilityClash": {
        "description": "Response returned when updating availability would create booking clashes",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AvailabilityClash"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "http",
        "scheme": "basic"
      },
      "oauth2": {
        "type": "http",
        "scheme": "oauth2"
      }
    }
  }
}